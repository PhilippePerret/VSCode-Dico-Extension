{
  "version": 3,
  "sources": ["../src/webviews/services/App.ts", "../src/webviews/ConsoleManager.ts", "../src/bothside/StringUtils.ts", "../src/bothside/RpcChannel.ts", "../src/webviews/RpcClient.ts", "../src/webviews/services/SelectionManager.ts", "../src/webviews/ClientItem.ts", "../src/webviews/services/HelpManager.ts", "../src/webviews/services/DomUtils.ts", "../src/webviews/services/VimLikeManager.ts", "../src/bothside/class_extensions.ts", "../src/webviews/PanelClient.ts", "../src/webviews/services/AccessTable.ts", "../src/webviews/services/ComplexRpc.ts", "../src/webviews/services/FormManager.ts", "../src/webviews/services/OeuvreFinder.ts", "../src/webviews/models/OeuvreForm.ts", "../src/webviews/models/Oeuvre.ts"],
  "sourcesContent": ["import { RpcChannel } from \"../../bothside/RpcChannel\";\n\nexport class App {\n  /**\n   * Les m\u00E9thodes suivantes peuvent s'appeler en tapant simplement leur\n   * nom en console (bas des panneaux \u2014 'c' pour rejoindre la console)\n   */\n\n  private static async openSupport() {\n    console.log(\"-> openSupport\");\n    App.rpc.notify('open-support-folder');\n    return \"Ouverture du dossier Support\";\n  }\n\n  private static async exportAllData(){\n    console.log(\"-> exportAllData\");\n    App.rpc.notify('export-all-data');\n    return \"Exportation des donn\u00E9es demand\u00E9e.\";\n  }\n\n  private static get rpc(): RpcChannel {return (window as any).RpcEntry; }\n\n  /**\n   * \n   * M\u00E9thode fonctionnelles\n   * \n   * @param code Code \u00E0 \u00E9valuer\n   * @returns True si tout s'est bien pass\u00E9 (le code \u00E0 pu \u00EAtre \u00E9valu\u00E9), False sinon\n   * \n   */\n  static eval(code: string){\n    const ok = this.tryEval(code) || this.tryEval('this.' + code) || this.tryEval(code + '()') || this.tryEval('this.' + code + '()') || console.warn(\"Code non \u00E9valuable dans App : %s\", code)\n      ;\n    if ( ok ) { return true ; }\n    else { return false; }\n  }\n  private static tryEval(code: string){\n    console.log(\"Code \u00E0 \u00E9valuer dans App.tryEval\", code);\n    try {\n      // eval(code);\n      const result = new Function('return ' + code).call(this);\n      if (undefined === result) { throw new Error(\"Code qui ne renvoie rien\");}\n      if ( 'function' === typeof result) { result(); }\n      return true;\n    } catch(erreur) {\n      // console.warn(erreur);\n      return false;\n    }\n  }\n\n}", "import { PanelClient } from \"./PanelClient\";\nimport { App } from \"./services/App\";\n\n/**\n * Pour g\u00E9rer les consoles de chaque panneau\n */\nexport class ConsoleManager {\n  private console: HTMLInputElement;\n  private history: string[] = [];\n  private ihistory: number = 0;\n\n  constructor(private panel: PanelClient<any>) {\n    this.console = panel.consoleInput as HTMLInputElement;\n  }\n  runCode() {\n    // Il vaut \u00E9valuer l'expression\n    const code = this.console.value;\n    try {\n      const result = (0, eval)(code);\n      this.history.push(code);\n      this.ihistory = this.history.length; // oui, vraiment\n      this.console.value = '';\n    } catch (error) {\n      if ( false === App.eval(code)) {\n        this.panel.flash(\"Ce code produit une erreur\u2026\", 'error');\n        console.error(code, error);\n      }\n    }\n  }\n  setCode(){\n    console.log(\"Console.setCode. History. iHistory\", this.history, this.ihistory);\n    this.console.value = this.history[this.ihistory];\n  }\n  backHistory(){\n    if ( this.ihistory === 0) {\n      console.log(\"Fin de l'historique\");\n      this.console.value = '';\n      return;\n    }\n    this.ihistory --;\n    this.setCode();\n  }\n  forwardHistory(){\n    if ( this.ihistory === this.history.length - 1) {\n      console.log(\"Bout de l'historique\");\n      return;\n    }\n    this.ihistory ++;\n    this.setCode();\n  }\n}", "/**\n * Utilitaire pour normaliser les cha\u00EEnes de caract\u00E8res\n * (suppression des accents, minuscules, etc.)\n */\nexport class StringNormalizer {\n  /**\n   * Normalise une cha\u00EEne en minuscules\n   */\n  static toLower(text: string): string {\n    return text.toLowerCase();\n  }\n\n  /**\n   * Normalise une cha\u00EEne en supprimant les accents et diacritiques\n   * TODO: \u00C0 am\u00E9liorer avec une vraie fonction de normalisation\n   */\n  static rationalize(text: string): string {\n    return text\n      .toLowerCase()\n      .normalize('NFD') // D\u00E9compose les caract\u00E8res accentu\u00E9s\n      .replace(/[\\u0300-\\u036f]/g, '') // Supprime les marques diacritiques\n      .replace(/[^a-zA-Z0-9]/g, '');  // note : si c'\u00E9tait avant la ligne pr\u00E9c\u00E9dente, il n'y aurait pas besoin de la ligne pr\u00E9c\u00E9dente\u2026\n  }\n}\n", "/**\n * Canal RPC pour communiquer entre extension et webview.\n * Les deux c\u00F4t\u00E9s chargent ce module.\n */\ntype Request = {\n  id: number;\n  method: string;\n  params: any;\n};\n\ntype Response = {\n  id: number;\n  result: any;\n};\n\ntype Notification = {\n  method: string;\n  params: any;\n};\n\nexport class RpcChannel {\n  private counter = 0;\n  private pending = new Map<number, (value: any) => void>();\n  private handlers = new Map<string, (params: any) => any>();\n\n  constructor(\n    private sender: (msg: any) => void,\n    private receiver: (cb: (msg: any) => void) => void\n  ) {\n    this.receiver(this.handleMessage.bind(this));\n  }\n\n  private handleMessage(msg: any) {\n    if (\"id\" in msg && \"method\" in msg) {\n      // C\u2019est une requ\u00EAte (ask c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        Promise.resolve(handler(msg.params)).then((result) => {\n          this.sender({ id: msg.id, result });\n        });\n      }\n    } else if (\"id\" in msg && \"result\" in msg) {\n      // R\u00E9ponse\n      const cb = this.pending.get(msg.id);\n      if (cb) {\n        cb(msg.result);\n        this.pending.delete(msg.id);\n      }\n    } else if (\"method\" in msg) {\n      // Notification (notify c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        handler(msg.params);\n      }\n    }\n  }\n\n  ask(method: string, params?: any): Promise<any> {\n    const id = this.counter++;\n    const req: Request = { id, method, params };\n    this.sender(req);\n    return new Promise((resolve) => {\n      this.pending.set(id, resolve);\n    });\n  }\n\n  notify(method: string, params?: any) {\n    // console.log(\"Message re\u00E7u dans le 'notify' du RpcChannel\", method, params);\n    const notif: Notification = { method, params };\n    this.sender(notif);\n  }\n\n  on(method: string, handler: (params: any) => any) {\n    // console.log(\"Message re\u00E7u dans le 'on' du RpcChannel\", method, handler);\n    this.handlers.set(method, handler);\n  }\n}\n", "import { RpcChannel } from \"../bothside/RpcChannel\";\n\ndeclare function acquireVsCodeApi(): {\n  postMessage: (msg: any) => void;\n};\n\nexport function createRpcClient() {\n  const vscode = acquireVsCodeApi();\n\n  return new RpcChannel(\n    // sender : envoie vers l'extension\n    (msg) => vscode.postMessage(msg),\n    // receiver : re\u00E7oit les messages de l'extension\n    (cb) => window.addEventListener(\"message\", (event) => cb(event.data))\n  );\n}", "import { AnyItemType } from \"../../bothside/types\";\nimport { PanelClient } from \"../PanelClient\";\nimport { AccessTable } from \"./AccessTable\";\n\nconst DEBUGIT = false;\n/**\n * Class principal de la gestion des s\u00E9lections dans les panneaux.\n * Chaque panneau poss\u00E8de son propre manager de s\u00E9lection puisque les\n * panneaux sont totalement ind\u00E9pendants.\n * \n * ATTENTION : Ce n'est pas cette classe qui g\u00E8re l'aspect des\n * \u00E9l\u00E9ments s\u00E9lectionn\u00E9s, c'est l'accessTable (jusqu'\u00E0 nouvel ordre\n * en tout cas...)\n * \n * C'est l'AccessTable de chaque panneau qui poss\u00E8de une instance de cette\n * classe appel\u00E9 selectionManager. Donc <panel>.accessTable.selectionManager.\n * \n * Pour le moment, on part du principe qu'il y a une seule s\u00E9lection \u00E0 la fois et\n * qu'il y a toujours une s\u00E9lection (la pr\u00E9c\u00E9dente ou la premi\u00E8re).\n * \n * On m\u00E9morise l'historique des s\u00E9lections afin de pouvoir y revenir.\n * \n * On ne manipule ici que des identifiants d'item, donc des strings courts.\n */\n\nexport class SelectionManager {\n  // La panneau associ\u00E9 au manager de s\u00E9lection\n  private panel: PanelClient<AnyItemType>;\n\n  private current: string | undefined = undefined;\n  public getCurrent(): string | undefined { return this.current; }\n  private icursor: number = 0;\n  private historique: string[] = [];\n \n  constructor(\n    private accessTable: AccessTable<AnyItemType>,\n  ) {\n    this.panel = accessTable.panel;\n  }\n\n  /**\n   * @api\n   * \n   * S\u00E9lection du prochain item (ou le premier)\n   * \n   */\n  public selectNextVisibleItem(){\n    let nextId: string | undefined = undefined;\n    if (this.current) {\n      nextId = (this.accessTable.getNextVisible(this.current) as AnyItemType)?.id;\n    }\n    console.log(\"nextId\", nextId);\n    nextId = nextId || (this.accessTable.getFirstVisible() as AnyItemType).id;\n    \n    this.debugit('Affectation de l\u2019item', nextId);\n\n    // On s\u00E9lectionne l'item suivant (ou le premier)\n    this.setAsCurrentSelected(nextId);\n\n    // On l'ajoute \u00E0 l'historique\n    this.add(nextId);\n  }\n\n  /**\n   * @papi\n   * \n   * S\u00E9lection de l'item visible pr\u00E9c\u00E9dent.\n   * \n   */\n  public selectPreviousVisibleItem(){\n    let prevId: string | undefined = undefined;\n    if (this.current){\n      prevId = (this.accessTable.getPrevVisible(this.current) as AnyItemType)?.id;\n    }\n    prevId = prevId || (this.accessTable.getLastVisible() as AnyItemType).id;\n    // Et on s\u00E9lectionne l'item pr\u00E9c\u00E9dent (ou le premier)\n    this.setAsCurrentSelected(prevId);\n    \n    // On l'ajoute \u00E0 l'historique\n    this.add(prevId);\n\n  }\n  /**\n   * @api\n   * \n   * M\u00E9thode pour d\u00E9selectionner la s\u00E9lection courante.\n   * \n   * Elle doit \u00EAtre publique car elle sert par exemple en cas de\n   * filtrage de la liste.\n   * \n   */\n  public deselectCurrent(){\n    this.current && this.accessTable.setSelectState(this.current, false);\n    this.current = undefined; \n  }\n \n  /**\n   * @api\n   * \n   * (Re)s\u00E9lectionne l'item pr\u00E9c\u00E9dent.\n   * \n   * Le \"re\" de \"reselectionne\" n'est l\u00E0 que pour indiquer qu'on fait\n   * cette op\u00E9ration est par une s\u00E9lection \"classique\". Elle est\n   * utilis\u00E9e en cas de filtrage de liste, quand l'itemp qui \u00E9t\u00E9 s\u00E9-\n   * lectionn\u00E9 et encore visible. Mais this.current a \u00E9t\u00E9 mis \u00E0 rien\n   * au d\u00E9but du filtrage.\n   * \n   * Note : on ne l'ajoute pas \u00E0 l'historique puisqu'il s'y trouve \n   * d\u00E9j\u00E0.\n   */\n  reselectItem(itemId: string){\n    this.setAsCurrentSelected(itemId);\n  }\n\n  /**\n   * @api Par exemple s\u00E9lection demand\u00E9e depuis un autre panneau\n   * \n   * @param itemId Identifiant de l'item \u00E0 s\u00E9lectionner\n   */\n  selectItem(itemId: string){\n    this.setAsCurrentSelected(itemId);\n    this.add(itemId);\n  }\n\n  /**\n    * Pour revenir \u00E0 l'item pr\u00E9c\u00E9dent\n    */\n  public historyBack() {\n    this.debugit('back');\n    this.ensurePrevCursor();\n    this.setAsCurrentSelected(this.historique[this.icursor]);\n  }\n  /**\n   * Pour passer \u00E0 l'\u00E9l\u00E9ment suivant\n   */\n  public historyNext() {\n    this.debugit('next');\n    this.ensureNextCursor();\n    this.setAsCurrentSelected(this.historique[this.icursor]);\n  }\n\n  /**\n   * Pour retirer l'item courant de l'historique des s\u00E9lections\n   */\n  public removeCurrentFromHistory() {\n    if (this.size === 1) {\n      this.panel.flash(\"On ne peut pas retirer le dernier item d\u2019historique s\u00E9lectionn\u00E9.\", 'warn');\n    } else {\n      this.historique.splice(this.icursor);\n      this.historyBack();\n    }\n  }\n\n\n\n  /**\n   * M\u00E9thode qui s'occupe de mettre l'\u00E9l\u00E9ment +itemId+ en item \n   * courant en s'assurant de s\u00E9lectionner l'item qui serait\n   * actuellement s\u00E9lectionn\u00E9.\n   * \n   * @param itemId Identifiant de l'\u00E9l\u00E9ment \u00E0 mettre en courant\n   */\n  private setAsCurrentSelected(itemId: string){\n     // S'il y avait un s\u00E9lectionn\u00E9, on le d\u00E9selectionne\n    this.current && this.deselectCurrent();\n    // On met le nouveau courant\n    this.current = String(itemId);\n    // On s\u00E9lectionne l'item\n    this.select();\n    // Et on scrolle jusqu'\u00E0 lui\n    this.panel.scrollTo(this.current);\n  }\n  \n\n  private select() {\n    this.current && this.accessTable.setSelectState(this.current, true);\n  }\n\n  private add(itemId: string) {\n    this.debugit('add');\n    this.historique.push(itemId);\n    this.icursor = this.lastIndex;\n  }\n  private ensurePrevCursor() {\n    this.icursor--;\n    if (this.icursor < 0) { this.icursor = this.lastIndex; }\n  }\n  private ensureNextCursor() {\n    this.icursor++;\n    if (this.icursor > this.lastIndex) { this.icursor = 0; }\n  }\n\n  private get lastIndex() { return this.size - 1; }\n  private get size() { return this.historique.length; }\n\n  // Pour d\u00E9bugger la classe\n  private debugit(where: string, id: string | undefined = undefined) {\n    if (!DEBUGIT) { return; }\n    console.log(`\n      [${where}]\n      icursor = %i\n      current = '%s'\n      id fourni = '%s'\n      `, this.icursor, (this.current ? `'${this.current}'` : 'undefined'), id, this.historique);\n  }\n\n\n}\n", "import { EntryType, OeuvreType, ExempleType, AnyItemType } from \"../bothside/types\";\nimport { SelectionManager } from \"./services/SelectionManager\";\nimport { PanelClient } from \"./PanelClient\";\n\ntype ItemDataType = EntryType | OeuvreType | ExempleType;\n\n/**\n * Class abstraite pour tous les Items (Entry, Oeuvre, Exemple)\n */\nexport abstract class ClientItem<Tdt extends ItemDataType> {\n  static klass: any;\n  public static get accessTable(){ return this.klass._accessTable;}\n  public static panel: PanelClient<any>;\n\n  // protected static _accessTable: AccessTable<any>;\n  private static _selector: SelectionManager;\n  public static get Selector(){ \n    return this._selector || (this._selector = new SelectionManager(this.klass));\n  }\n\n  // Raccourcis vers l'accessTable, pour obtenir des informations\n  // sur les items ou les items eux-m\u00EAme\n  static get(itemId: string): AnyItemType | undefined {\n    return this.accessTable.get(itemId);\n  } \n  static getObj(itemId: string): HTMLDivElement {\n    return this.accessTable.getObj(itemId);\n  }\n  static each(method:(item: AnyItemType) => void){ this.accessTable.each(method);}\n\n  static isVisible(id: string): boolean { return this.accessTable.isVisible(id); }\n  static setVisible(id: string) { this.accessTable.setVisibility(id, true); }\n  static setInvisible(id: string) { this.accessTable.setVisibility(id, false); }\n\n  static selectFirstItem() { this.panel.select(this.accessTable.firstItem);}\n\n  static editItem(itemId: string): void { this.panel.form.editItem(this.get(itemId)); }\n  static createNewItem(){ \n    // Cr\u00E9er un objet DB vide pour nouveau item\n    const emptyDbData = { id: '' }; // Les autres champs seront initialis\u00E9s dans le formulaire\n    this.panel.form.editItem(new this.klass(emptyDbData)); \n  }\n\n  // toRow(){ return {};}\n  /**\n   * M\u00E9thode qui re\u00E7oit les items s\u00E9rialis\u00E9s depuis l'extension et va les\n   * consigner dans le panneau, dans une AccessTable qui permettra de \n   * parcourrir les \u00E9l\u00E9ments. \n   */\n  static deserializeItems(items: string[]): void {\n    const allItems: AnyItemType[] = items.map( (item: string) => JSON.parse(item) as AnyItemType);\n    // console.log(\"Tous les items\", allItems);\n    this.setAccessTableWithItems(allItems);\n  }\n  /* Surclass\u00E9e */ static setAccessTableWithItems(items: any){};\n\n  public get id(): string {return this.item.id;}\n\n  constructor(\n    public item: Tdt\n  ){ } \n\n  // Pour obtenir l'AccKey (ak) de l'item\n  static getAccKey(id: string) { return this.accessTable.getAccKey(id) ; }\n}", "import { PanelClient } from \"../PanelClient\";\nimport { App } from \"./App\";\n\nexport class Help {\n  /**\n   * D\u00E9finitions des aides contextuelles.\n   * Soit un simple string (si pas de raccourcis clavier)\n   * Soit un array [aide, {lettre: methode-string}] \n   */\n  static get(keyHelp: string): string |undefined {\n    switch(keyHelp){\n\n      // FEN\u00CATRE DE D\u00C9MARRAGE\n      case 'start': return `\n      ## D\u00E9marrage de l'extension\n\n      Pour commencer, activer le premier panneau (entr\u00E9es) avec \u23181.\n\n      \u00C0 tout moment, vous pouvez obtenir de l'aide contextuelle en tapant \"?\" (donc \"\u21E7,\").\n      \n      Les raccourcis de base, utilisable dans les trois panneaux, sont les suivants :\n\n      ${this.buildShortcutsTable([\n        {s: 's', m: 'NORMAL', d: 'Pour se placer dans le champ de filtre et filtrer la liste.'},\n        {s: 'n', m: 'NORMAL', d:'Pour cr\u00E9er un nouvel \u00E9l\u00E9ment.'},\n        {s: 'j', m: 'NORMAL', d: 'Pour s\u00E9lectionner l\u2019\u00E9l\u00E9ment suivant ou le premier.'},\n        {s: 'k', m: 'NORMAL', d: 'Pour remonter \u00E0 l\u2019\u00E9l\u00E9ment pr\u00E9c\u00E9dent'},\n        {s: 'b', m: 'NORMAL', d: '(comme \u00AB\u00A0back\u00A0\u00BB) Pour s\u00E9lectionner l\u2019\u00E9l\u00E9ment pr\u00E9c\u00E9demment s\u00E9lectionn\u00E9'},\n        {s: 'f', m: 'NORMAL', d: 'Pour repasser \u00E0 l\u2019\u00E9l\u00E9ment suivant de l\u2019historique des s\u00E9lections'},\n        {s: 'r', m: 'NORMAL', d: 'Pour retirer la s\u00E9lection de l\u2019historique des s\u00E9lections'},\n        {s: 'e', m: 'NORMAL', d: 'Pour mettre en \u00E9dition l\u2019\u00E9l\u00E9ment s\u00E9lectionn\u00E9.'},\n        {s: 'm', m: 'NORMAL', d: '(comme \u00AB mise en forme\u00A0\u00BB) pour mettre en forme le texte.'},\n        {s: 'Tab', m: 'NORMAL', d: 'pour passer de lien en lien (d\u00E9finition et exemple)'},\n        {s: '\u21E7Tab', m: 'NORMAL', d: 'Passer de lien en lien en remontant'},\n        {s: 'g', m: 'NORMAL', d: 'Rejoindre la cible du lien'},\n        {s: 'c', m: 'NORMAL', d: 'Pour se placer dans la console et jouer une commande.'},\n        {s: 'C (\u21E7c)', m: 'NORMAL', d: 'Choisir l\u2019entr\u00E9e s\u00E9lectionn\u00E9e pour le nouvel exemple d\u00E9j\u00E0 en \u00E9dition.'},\n        {s: 'E (\u21E7e)', m: 'NORMAL', d: 'Cr\u00E9er un nouvel exemple pour l\u2019entr\u00E9e.'},\n      ])}\n      \n      \u00C0 tout moment, taper **?** pour afficher l'aide contextuelle.\n      \n      ## Commandes\n\n      ${this.buildCommandsTable([\n        {c: 'openSupport', d:'\u2026 pour ouvrir le dossier support dans le Finder, qui contient la base et tous les backups.' },\n        {c: 'exportAllData', d: '\u2026 pour faire un export des donn\u00E9es dans quatre formats, JSON, YAML, CSV et Simple Text.'},\n      ])}\n\n      ## \u00C9dition de la d\u00E9finition\n\n      ### Autocompl\u00E9tion\n\n\n      ${this.buildShortcutsTable([\n        {s: 'tt\u21E5', m:'EDIT', d: 'Mot technique format\u00E9 et index\u00E9'},\n        {s: '->(\u21E5', m:'EDIT', d: 'Mot technique format\u00E9, index\u00E9 avec num. de page'},\n        {s: 'idx\u21E5', m:'EDIT', d: 'Mot technique index\u00E9, non format\u00E9'},\n        {s: 'erm(\u21E5', m:'EDIT', d: 'Mot technique format\u00E9, non index\u00E9'},\n      ])}\n\n\n      ### Insertion d'un exemple (existant)\n\n\n      Avec l'item en \u00E9dition et le curseur plac\u00E9 au bon endroit, rejoindre le panneau des exemples (\u23183), filtrer pour n'afficher que le film (<shortcut>s</shortcut> puis 1res lettres), s\u00E9lectionner l'exemple voulu (<shortcut>j</shortcut>/<shortcut>k</shortcut>) et enfin tapez <shortcut>i</shortcut> (comme \u00AB\u00A0identifiant\u00A0\u00BB ou \u00AB\u00A0ins\u00E9rer\u00A0\u00BB).\n\n      Automatiquement, l'identifiant de l'exemple sera ins\u00E9r\u00E9 dans l'entr\u00E9e \u00E9dit\u00E9e.\n      `\n      ;\n\n      // CR\u00C9ATION D'UN \u00C9L\u00C9MENT QUELCONQUE\n      case 'create-element': return `\n      ## Cr\u00E9ation d'un \u00E9l\u00E9ment\n      \n      Vous pouvez vous placer de champ en champ avec les touches \n      <shortcut>a</shortcut>, <shortcut>b</shortcut>, etc. ou la touche \n      tabulation.`;\n\n      // CR\u00C9ATION D'UNE OEUVRE\n      case 'create-oeuvre': return `\n      ## Cr\u00E9ation d'une \u0153uvre\n\n      Jouer la touche <shortcut>n</shortcut> pour cr\u00E9er le nouvel \u00E9l\u00E9ment.\n\n      Une fois le titre rentr\u00E9, gr\u00E2ce \u00E0 la touche <shortcut>i</shortcut>, vous \n      pouvez obtenir les infos qu'on peut trouver sur le net. En pr\u00E9cisant l'ann\u00E9e \n      (approximative), la langue et/ou le pays, vous pouvez \u00EAtre presque certain \n      de trouver l'\u0153uvre du premier coup.\n\n      L'ann\u00E9e (approximative \u00E0 10 ans pr\u00E8s) se met dans le champs d\u00E9die, la langue \n      et le pays peuvent s'indiquer dans le champs 'notes' sous la forme JSON. Par \n      exemple <code>{\"langue\": \"en\", \"pays\": \"us\"}</code>.\n\n      Ensuite, TMDB renvoie la liste de toutes les \u0153uvres correspondantes qu'il a \n      trouv\u00E9 et les passe en revue pour choisir laquelle garder. \u00C7a se fait en deux \n      temps\u00A0:\n\n      - rel\u00E8ve de toutes les \u0153uvres, d'un coup, avec infos minimales,\n      - on fait un tri par rapport \u00E0 celles-ci,\n      - TMDB rel\u00E8ve les informations compl\u00E8tes (principalement les cr\u00E9dits),\n      - On choisit celle qui correspond vraiment.\n      `;\n\n      // \u00C9DITION D'UN \u00C9L\u00C9MENT\n      case 'edit-element': return `\n      ## \u00C9dition d'un \u00E9l\u00E9ment\n      \n      Vous pouvez aller de champ en champ avec les touches-raccourcis indiqu\u00E9es en regard de chaque champ.\n      `;\n\n      // \u00C9DITION D'UNE OEUVRE\n      case 'edit-oeuvre': return `\n      ## \u00C9dition d'une \u0153uvre\n\n      D\u00E9placez-vous de champ en champ avec la touche tabulation ou en jouant \n      les lettres en regard des champs.\n      `;\n    }\n  }\n  /**\n   * Pour construire une table de commande \n   * \n   * @param shortcuts D\u00E9finition des commandes\n   * @returns  La table HTML\n   */\n  private static buildCommandsTable(commands: {c: string, d: string}[]): string{\n    const rows: string[] = [];\n    rows.push('<tr><td>Commande</td><td>Effet</td></tr>');\n    commands.forEach(sc => rows.push(`<tr><td>${sc.c}</td><td>${sc.d}</td></tr>`));\n    return '<table class=\"commands\">' + rows.join('') + '</table>';\n  }\n\n  /**\n   * Pour construire une table de raccourcis-clavier\n   * \n   * @param shortcuts D\u00E9finition des raccourcis\n   * @returns  La table HTML\n   */\n  private static buildShortcutsTable(shortcuts: {s: string, m: string, d: string}[]): string{\n    const rows: string[] = [];\n    rows.push('<tr><td>Racc.</td><td>MODE</td><td>Effet</td></tr>');\n    shortcuts.forEach(sc => rows.push(`<tr><td><shortcut>${sc.s}</shortcut></td><td>${sc.m}</td><td>${sc.d}</td></tr>`));\n    return '<table class=\"shortcuts\">' + rows.join('') + '</table>';\n  }\n\n\n  constructor(private panel: PanelClient<any>) {\n  }\n  /**\n   * API\n   * M\u00E9thode activant l'aide circonstantielle.\n   * (voir le manuel)\n   */\n  public activateContextualHelp(){\n    const context = this.panel.context;\n    const extraParams = this.affineContexte(context);\n    const [content, KbBypass] = this.defineCHelp(context, extraParams);\n    this.showCHelp(content);\n    this.panel.keyManager.keyboardBypass = KbBypass;\n  }\n\n  private affineContexte(context: string): Record<string, any> | undefined {\n    switch(context) {\n      case 'create-new-element': \n        // il faut voir si l'user est au d\u00E9but ou \u00E0 la fin\n        return {};\n      default: return;\n    }\n  }\n\n  private defineCHelp(context:string, params: Record<string, any> | undefined): [string, Map<string, any>] {\n    const kbb = new Map();\n    kbb.set('q', this.closeCHelp.bind(this));\n    let bypass: {[x:string]: any};\n    let content: string | undefined = Help.get(context);\n    if (content) {\n      return [this.formate(content) as string, kbb];\n    } else { return ['', kbb]; }\n  }\n\n  formate(str: string): string {\n    // console.log(\"-> formate (formatage du texte d'aide\", str);\n   return str\n      // Pour \"compacter\" les codes HTML de paragraphe, table, etc.\n      .trim()\n      .replace(/^\\s+/gm, '')\n      .replace(/>\\n+/g, '>')\n      .replace(/\\n+<\\//g, '</')\n      .replace(/\\*\\*(.+?)\\*\\*/g, '<b>$1</b>')\n      .replace(/\\*(.+?)\\*/g, '<em>$1</em>')\n      .replace(/^### (.+)$/mg, '<h3>$1</h3>')\n      .replace(/^## (.+)$/mg, '<h2>$1</h2>')\n      .replace(/^# (.+)$/mg, '<h1>$1</h1>')\n      .split(\"\\n\\n\")\n      .map(s => {\n        // console.log(\"Segment: \", s);\n        if (s.startsWith('<')){return s;}\n        else {return `<p>${s}</p>`;}\n      })\n      .join('');\n  }\n  /**\n   * Affichage du texte d'aide contextuelle et mise en attente\n   * \n   * (note : le \"C\" de \"Chelp\" pour \"contextual\")\n   * \n   * @param content Le contenu textuel \u00E0 afficher\n   */\n  private showCHelp(content: string) {\n    this.CHbuilt || this.CHbuild();\n    this.CHObj.classList.remove('hidden');\n    const divCont = (this.CHObj.querySelector('.content') as HTMLElement);\n    divCont.innerHTML = content;\n  }\n  private CHObj!: HTMLDivElement;\n  private CHbuilt: boolean = false;\n\n  public closeCHelp(){\n    this.CHObj.classList.add('hidden');\n  }\n  \n  // Construction du div de l'aide contextuelle\n  CHbuild(){\n    let o = document.createElement('div');\n    o.className = \"aide-contextuelle hidden\";\n    let cont = document.createElement('div');\n    cont.className = 'content';\n    o.appendChild(cont);\n    let btns = document.createElement('div');\n    btns.className = 'buttons';\n    btns.innerHTML = 'q: quitter l\u2019aide';\n    o.appendChild(btns);\n    document.body.appendChild(o);\n    this.CHObj = o;\n    this.CHbuilt = true;\n  }\n}", "export const listen = function(element: HTMLElement, evType: keyof HTMLElementEventMap, method: (this: HTMLElement, ev: HTMLElementEventMap[typeof evType]) => any): void {\n element.addEventListener(evType, method); \n};\n\nexport const stopEvent = function(ev: any): false {\n  ev.preventDefault();\n  ev.stopImmediatePropagation();\n  return false;\n};", "import { AnyDbType, AnyItemType } from \"../../bothside/types\";\nimport { Entry } from \"../models/Entry\";\nimport { PanelClient } from \"../PanelClient\";\nimport { AccessTable } from \"./AccessTable\";\nimport { stopEvent } from \"./DomUtils\";\nimport { FormManager } from \"./FormManager\";\nimport { SelectionManager } from \"./SelectionManager\";\n\ntype MODES = 'normal' | 'edit' | 'null' | 'form' | 'console' ;\n\nexport class VimLikeManager {\n  // \n  /**\n   * MODE DU PANNEAU\n   * \n   * Pour le moment, le panneau peut \u00EAtre dans deux \u00E9tats, en\n   * fonction du fait que le curseur se trouve dans un champ\n   * \u00E9ditable ou non.\n   */\n  protected _keylistener: (ev: KeyboardEvent) => true | false | undefined | void;\n  protected _mode: MODES = 'normal' ; \n  protected get mode() { return this._mode ; }\n  private form: FormManager<AnyItemType, AnyDbType>;\n  public setMode(mode: MODES) { this.mode = mode; }\n  protected set mode(mode: MODES) { // de l'ext\u00E9rieur, utiliser la m\u00E9thode setMode \n    // console.info(\"[VimLikeManager mode] Mise du mode \u00E0 '%s')\", mode);\n    this._mode = mode ;\n    // Le mode d\u00E9termine le capteur d'\u00E9v\u00E8nement\n    switch(mode) {\n      case 'console':\n        this._keylistener = this.onKeyDownModeConsole.bind(this);\n        break;\n      case 'edit':\n        // console.log(\"[VimLikeManager.mode] Passage du mode clavier au mode edit\");\n        this._keylistener = this.onKeyDownModeEdit.bind(this);\n        break;\n      case 'normal':\n        // console.log(\"[VimLikeManager.mode] Passer le mode clavier en mode NORMAL\");\n        this._keylistener = this.onKeyDownModeNormal.bind(this);\n        break;\n      case 'null':\n        // console.log('Le panneau est en mode NULL (sans action');\n        this._keylistener = this.onKeyDownModeNull.bind(this);\n        break;\n      case 'form':\n        // console.log(\"Panneau en mode FORMulaire\");\n        this._keylistener = this.onKeyDownModeForm.bind(this);\n        break;\n    }\n    // Indiquer dans l'interface le mode\n    this.root.dataset.mode = `mode-${mode}` ;\n    \n    if (this.root.querySelector('span#mode-name')){\n      const spanName = this.root.querySelector('span#mode-name') as HTMLSpanElement;\n      spanName.innerHTML = mode.toLocaleUpperCase();\n    } else {\n      console.warn(\"Bizarrement, le span #mode-name affichant le mode du panneau est introuvable.\");\n    }\n  }\n\n  readonly searchInput: HTMLInputElement;\n  readonly consoleInput: HTMLInputElement;\n\n  constructor(\n    private root: HTMLBodyElement, \n    private panel: PanelClient<AnyItemType>, \n    private klass: any,\n  ) {\n    this.mode = 'null';\n    this.loadConsoleManager(); // Promise\n    // @DEPRECATED Il faut \u00EAtre plus pr\u00E9cis. Si on fait \u00E7a, dans le formulaire\n    // le mode est toujours remis au mode normal et edit\n    // this.root.addEventListener('focusin', this.onFocusIn.bind(this));\n    // this.root.addEventListener('focusout', this.onFocusOut.bind(this));\n\n    this.form = this.panel.form; // cached\n\n    // Pour placer une capture \"universelle\", c'est-\u00E0-dire qui capture les keydown\n    // quel que soit le mode courant\n    this.root.addEventListener('keydown', this.universelKeyboardCapture.bind(this), true);\n    // La m\u00E9thode qui capture les touches et les renvoie vers la m\u00E9thode appropri\u00E9e\n    // en fonction du mode.\n    this.root.addEventListener('keydown', this.onKeyDown.bind(this));\n    this._keylistener = this.onKeyDownModeNull.bind(this);\n    this.searchInput = this.root.querySelector('input#search-input') as HTMLInputElement;\n    this.consoleInput = this.root.querySelector('input#panel-console') as HTMLInputElement;\n    this.searchInput.addEventListener('focus', this.onFocusEditField.bind(this, this.searchInput));\n    this.searchInput.addEventListener('blur', this.onBlurEditField.bind(this, this.searchInput));\n    this.consoleInput.addEventListener('focus', this.onFocusConsole.bind(this, this.consoleInput));\n    this.consoleInput.addEventListener('blur', this.onBlurConsole.bind(this, this.consoleInput));\n  }\n\n  onFocusConsole(field: HTMLInputElement, ev: FocusEvent) {\n    this.setMode('console');\n  }\n  onBlurConsole(field: HTMLInputElement, ev: FocusEvent){\n    this.setMode('normal');\n  }\n  onFocusEditField(field: HTMLInputElement, ev: FocusEvent) {\n    this.setMode('edit');\n  }\n  onBlurEditField(field: HTMLInputElement, ev: FocusEvent ) {\n    // console.log(\"-> onBlurEditField\");\n    this.setMode('normal');\n    // console.log(\"<- onBlurEditField\");\n  }\n  keyboardBypass:Map<string, Function> | undefined;\n  // La m\u00E9thode qui choppe normalement toutes les touches, quel que soit le mode\n  /**\n   * Capteur Universel de Touche clavier\n   * \n   * Quel que soit le mode, cette m\u00E9thode re\u00E7oit les touches clavier\n   * avant tout le monde.\n\n   * Cela permet : \n   *    - d'impl\u00E9menter un syst\u00E8me de \"coupe-circuit\" qui est\n   *      utilis\u00E9 par exemple pour les messages de type \"action \n   *      demand\u00E9e\". (voir le manuel pour le d\u00E9tail). \n   *    - d'impl\u00E9menter la gestion de touche \"?\" qui permet, quelle\n   *      que soit la situation, d'obtenir de l'aide.\n   */\n  universelKeyboardCapture(ev: KeyboardEvent) {\n    // Pour voir toutes les touches qui sont press\u00E9es, toutes\n    // console.log(\"[universel capture (mode %s)] Key up = \", this.mode, ev.key, ev);\n\n    if ( ev.key === '?' ) {\n      // <= L'user a tap\u00E9 la touche '?'\n      // => On doit afficher l'aide circonstantielle (voir le manuel)\n      //    (m\u00EAme quand on est dans l'ide circonstantielle)\n      this.panel.activateContextualHelp();\n      return stopEvent(ev); \n    } else if ((ev.target as HTMLElement).tagName.toLowerCase() === 'select') {\n      const select = ev.target as HTMLSelectElement;\n      switch(ev.key) {\n        case 'j':\n        case 'ArrowDown': // Sur les menus <select>\n          select.selectedIndex += 1;\n          break;\n        case 'k':\n        case 'ArrowUp': // Sur les menus <select>\n          select.selectedIndex -= 1;\n          break;\n      }\n      return true;\n    } else if (this.keyboardBypass) {\n      // <= Un bypass existe (bloquant toutes les touches)\n      // => Il faut voir si la touche est connue\n      if (this.keyboardBypass.has(ev.key)) {\n        /* Ici, c'est un peu compliqu\u00E9, car il faut d\u00E9truire le bypass\n         * avant de jouer la m\u00E9thode car cette m\u00E9thode pourrait\n         * red\u00E9finir un autre coupe-circuit \u00E0 prendre en compte\n         */\n        const methodBypass = (this.keyboardBypass as Map<string, any>).get(ev.key);\n        // console.log('methodBypass dans VimLike', methodBypass);\n        delete this.keyboardBypass;\n        // Attention, ci-dessous, j'ai peut-\u00EAtre un souci de niveau\n        // du \"effacer avant de jouer la m\u00E9thode bypass ou effacer\n        // apr\u00E8s ?\" Si j'ai plusieurs flashAction qui se suivent, il\n        // faut effacer avant. V\u00E9rifier si dans d'autres cas, c'est\n        // le contraire et voir comment on peut faire.\n        this.panel.cleanFlash();\n        this.panel.cleanFooterShortcuts(); // Les raccourcis ont pu y \u00EAtre affich\u00E9s\n        methodBypass(); \n      }\n      // Dans tous les cas on bloque la touche et on supprime le\n      // coupe-circuit clavier\n      return ev && stopEvent(ev);\n    }\n    return true;\n  }\n\n  /**\n   * API\n   * M\u00E9thode de discrimination dans l'objet +obj+. Tous les champs qu'il contient\n   * qui sont des champs d'\u00E9dition textuels vont faire basculer dans le mode :editMode\n   * quand ils sont focusser et le mode :normalMode (souvent 'normal') quand on va\n   * les blurer \n   * \n   * @param obj {HTMLElement} Bloc contenant les champs d'\u00E9dition\n   * @param modes {Hash} Table d\u00E9finisssant :edit et :normal pour savoir le nom des\n   * modes \u00E0 utiliser en \u00E9dition (dans un champ \u00E9ditable) et hors \u00E9dition.\n   */\n  discrimineFieldsForModeIn(obj: HTMLElement, modes: {edit: MODES, normal: MODES}) {\n    const selectors = 'input[type=\"text\"], input[type=\"email\"], input[type=\"password\"], textarea, [contenteditable]';\n    obj.querySelectorAll(selectors).forEach(field => {\n      // console.log(\"Discrimination du champ \", field);\n      field.addEventListener('focus', this.setMode.bind(this, modes.edit));\n      field.addEventListener('blur', this.setMode.bind(this, modes.normal));\n    });\n  }\n\n  // Sera remplac\u00E9 par la bonne m\u00E9thode suivant le mode.\n  onKeyDown(ev: KeyboardEvent) { \n    return this._keylistener(ev);\n  }\n\n  /**\n   * ============ TOUS LES MODES DE CLAVIER ================\n   */\n\n  // Quand la touche meta est press\u00E9e, on passe toujours par l\u00E0\n  onKeyDownWithMeta(ev: KeyboardEvent) {\n    switch(ev.key) {\n      case 'q': case 'Q':\n        stopEvent(ev);\n        console.log(\"On ne peut pas quitter comme \u00E7a\u2026\");\n        break;\n      case 's': case 'S':\n        stopEvent(ev);\n        console.log(\"Demande de sauvegarde forc\u00E9e.\");\n        break;\n    }\n  }\n  private get accessTable(): AccessTable<AnyItemType>{\n    return this._accesstable || (this._accesstable = this.klass.accessTable);\n  }\n  private get selectionManager(): SelectionManager {\n    return this._selmanager || (this._selmanager = this.accessTable.selectionManager);\n  } \n  private _accesstable!: AccessTable<AnyItemType>;\n  private _selmanager!: SelectionManager;\n  \n  onKeyDownModeNormal(ev: KeyboardEvent) {\n    // console.log(\"-> VimLikeManager.onKeyDownModeNormal\", ev.key, ev);\n    if (ev.metaKey) { return this.onKeyDownWithMeta(ev); }\n    stopEvent(ev);\n    switch (ev.key) {\n      case 's': // focus dans champ de filtre\n        this.searchInput.focus(); break;\n      case 'j': // S\u00E9lection item apr\u00E8s\n        this.selectionManager.selectNextVisibleItem(); break;\n      case 'k': // S\u00E9lection item avant\n        this.selectionManager.selectPreviousVisibleItem(); break;\n      case 'b': // back to s\u00E9lection pr\u00E9c\u00E9dente\n        this.selectionManager.historyBack(); break;\n      case 'f': // forward to s\u00E9lection pr\u00E9c\u00E9dentes\n        this.selectionManager.historyNext();break;\n      case 'i': // pour obtenir l'identifiant (surtout un exemple)\n        this.klass.sendIdCurrentToDefinition();break;\n      case 'r': // remove courante s\u00E9lection from historique s\u00E9lections\n      this.selectionManager.removeCurrentFromHistory();break;\n      case 'c': // focus dans console\n        this.consoleInput.focus(); break;\n      case 'e':\n        if ( this.panel.getSelection() ) {\n          this.klass.editItem(this.panel.getSelection() as string);\n        } else { console.log(\"Pas de s\u00E9lection \u00E0 \u00E9diter\");}\n        break;\n      case 'n':\n        this.klass.createNewItem();\n        break;\n      case 'Tab':\n        this.panel.nextLinkSelection(ev.shiftKey);\n        break;\n      case 'g': \n        this.panel.activeLinkSelection();\n        break;\n      default: \n         // Le panneau peut aussi d\u00E9finir sa propre table\n        if (this.panel.tableKeys[ev.key]) {this.panel.tableKeys[ev.key].fn.call(null);}\n        else {\n          console.log(\"Pour le moment, je ne fais rien de '%s'\", ev.key);\n        }\n    }\n    return false;\n  }\n\n  /**\n   * Gestionnaire des touches de clavier en mode EDIT (dans un\n   * champ d'\u00E9dition) \n   */\n  onKeyDownModeEdit(ev: KeyboardEvent) {\n    if ( ev.metaKey ) { return this.onKeyDownWithMeta(ev) ; }\n    switch(ev.key) {\n      case 'Tab': \n      //*\n        switch(this.threelast.join('')){\n          case 'dim':\n            ev.stopPropagation();\n            return this.klass.autocompleteDim(ev);\n          case 'tt(': return this.autoCompleteBaliseTerm('tt(', ev);\n          case 'rm(': return this.autoCompleteBaliseTerm('tt(', ev);\n          case 'tp(':return this.autoCompleteBaliseTerm('tt(', ev);  \n\n        }\n        \n        switch(this.twolast.join('')){\n          case '>(': return this.autoCompleteBaliseTerm('->(', ev);\n          case 'tp': return this.autoCompleteBaliseTerm('ttp', ev);\n          case 'tt': return this.autoCompleteBaliseTerm('tt', ev);\n        }\n            //*/\n        (ev.target as HTMLElement).blur();\n        return stopEvent(ev);\n      default:\n        // console.log(\"Touche non trait\u00E9e : %s\", ev.key);\n    }\n    // Pour toujours conserver les trois derni\u00E8res lettres\n    this.threelast.shift();\n    this.threelast.push(ev.key);\n    // Pour toujours conserver les deux derni\u00E8res touches\n    this.twolast.shift();\n    this.twolast.push(ev.key);\n    // console.log(\"Deux derni\u00E8res lettres = '%s'\", this.twolast.join(''));\n    return true;\n\n  }\n\n  private autoCompleteBaliseTerm(balise: string, ev: Event){\n    ev.stopPropagation();\n    return this.klass.autoCompleteBaliseTerm('tt', ev);\n  }\n  private twolast: [string, string] = ['', ''];\n  private threelast: [string, string, string] = ['', '', ''];\n\n  // Mode clavier pour la console\n  private consoleManager!: any; // Instance ConsoleManager;\n  onKeyDownModeConsole(ev: KeyboardEvent){\n    switch(ev.key) {\n      case 'Enter':\n        this.consoleManager.runCode();\n        break;\n      case 'ArrowDown':\n        this.consoleManager.forwardHistory();\n        break;\n      case 'ArrowUp':\n        this.consoleManager.backHistory();\n        break;\n      default:\n        console.log(\"Console. Lettre %s\", ev.key);\n    }\n  }\n  async loadConsoleManager(){\n    const module = await import('../ConsoleManager');\n    this.consoleManager = new module.ConsoleManager(this.panel);\n  }\n\n  // Mode clavier pour le formulaire\n  onKeyDownModeForm(ev: KeyboardEvent) {\n    // console.log(\"-> onKeyDownModeForm\", ev);\n    // Pour emp\u00EAcher toute action pendant la sauvegarde\n    if ( this.form.saving === true ) { return; }\n    if (ev.metaKey) { return this.onKeyDownWithMeta(ev); }\n    switch (ev.key) {\n      case 'a': // focusser dans premier champ (avec shortcut)\n        this.form.focusField(1); break;\n      case 'b': // focusser dans le second champ\n        this.form.focusField(2); break;\n      case 'c': // focusser dans le 3e champ\n        this.form.focusField(3); break;\n      case 'd': // focusser dans le 4e champ\n        this.form.focusField(4); break;\n      case 'e': // focusser dans le 5e champ\n        this.form.focusField(5); break;\n       case 'f': // focusser dans le 6e champ\n        this.form.focusField(6); break;\n      case 'g':\n        this.form.focusField(7); break;\n      case 'l': // Bloquer/d\u00E9bloquer le verrouillage de l'id\n        this.form.toggleIdLock(); break;\n      case 's': // Sauvegarder\n        this.form.saveItem(false); break;\n      case 'w': // \n        this.form.saveItem(true); break;\n      case 'q': // Annuler\n        this.form.cancelEdit(); break;\n     default:\n        // Le formulaire peut d\u00E9finir une table `tableKeys' pour\n        // d\u00E9finir les fonctions \u00E0 appeler par touche\n        if (this.form.tableKeys[ev.key]) {this.form.tableKeys[ev.key].fn.call(null);}\n    }\n    // On annule l'\u00E9v\u00E8nement\n    return stopEvent(ev);\n  }\n  \n  onKeyDownModeNull(ev: KeyboardEvent) {\n    console.error(\"Il faut activer un mode de clavier\");\n    return stopEvent(ev);\n  }\n\n  // @return true si la cible de l'\u00E9v\u00E8nement +ev+ est un champ \u00E9ditable\n  targetEventIsEditable(ev: any) : boolean {\n    return (ev.target as HTMLElement).matches('input, textarea, [contenteditable]');\n  }\n}", "declare global {\n  interface Map<K, V> {\n    firstValue(): this,\n  }\n}\n\nMap.prototype.firstValue = function(){\n  for(var v of this.values()){ return v; }\n};\n\nexport {};", "import { Entry } from \"./models/Entry\";\nimport { Exemple } from \"./models/Exemple\";\nimport { Oeuvre } from \"./models/Oeuvre\";\nimport { AccedableItem, AccessTable } from \"./services/AccessTable\";\nimport { FormManager } from \"./services/FormManager\";\nimport { Help } from \"./services/HelpManager\";\nimport { VimLikeManager } from \"./services/VimLikeManager\";\nimport \"../bothside/class_extensions\";\nimport { AnyItemType } from \"../bothside/types\";\nimport { stopEvent } from \"./services/DomUtils\";\n\n\nexport type FlashMessageType = 'notice' | 'warn' | 'error' | 'action';\n\ninterface PanelConstructorData {\n  minName: string;\n  titName: string;\n  klass: typeof Entry | typeof Oeuvre | typeof Exemple;\n  form: any; // gestionnaire de formulaire\n}\n\nexport class PanelClient<T extends AnyItemType> {\n  \n  // ========== A P I ================\n\n  public tableKeys: Record<string, {lab: string, fn: Function}> = {}; // shortcuts propres aux panneaux\n  public context: string = 'start';\n  public form!: FormManager<any, any>;\n  public get isActif(): boolean { return this._actif === true ; }\n  public get isInactif(): boolean { return this._actif === false ; }\n  public get keyManager(){ return this._keyManager; }\n  // Pour marquer le panneau actif ou inactif\n  public activate() { \n    this.setPanelFocus(true); \n    // Si un formulaire \u00E9tait actif, il faut repasser en mode 'form'\n    if (this.form.isActive()) {\n      this.form.__onFocusOnForm(undefined);\n      this.keyManager.setMode('form');\n    } else {\n      this.keyManager.setMode('normal');\n    }\n\n  }\n  public desactivate() { this.setPanelFocus(false); }\n\n  /**\n   * M\u00E9thode puissante permettant d'attendre une r\u00E9action de l'utilisateur en affichant un \n   * message. Typiquement, c'est le \"Pour faire \u00E7a, tapez 1, pour faire \u00E7a, tapez 2\".\n   * \n   * Noter que \u00E7a n'est pas une m\u00E9thode asynchrone. Si on l'utilise, c'est \u00E0 l'ancienne, en\n   * arr\u00EAtant le flux apr\u00E8s elle.\n   * \n   * @param msg Le message \u00E0 afficher\n   * @param buttons La table des raccourcis/fonctions qui doivent court-circuiter le fonctionnement\n   *    Ils peuvent avoir deux formes : \n   *    - seulement la fonction buttons.set('<touche>', this.<fonction>.bind(this))\n   *    - le message et la fonction : buttons.set('<touche>', ['le message', this.<fonction>.bind(this)])\n   *      Dans ce dernier cas, le message sera affich\u00E9 au-dessus et les boutons sous la console, dans la\n   *      partie des outils du panneau.\n   */\n  public flashAction(msg: string, buttons: Map<string, any>) {\n    let realButtons = buttons;\n    this.flash(msg, 'action');\n    if (Array.isArray(buttons.firstValue())) {\n      realButtons = new Map();\n      const outils: string[] = [];\n      buttons.forEach((ary: any, lettre: string ) => {\n        const [ordre, fonction] = ary;\n        outils.push(`<shortcut>${lettre}</shortcut> ${ordre}`);\n        realButtons.set(lettre, fonction);\n      });\n      // console.log(\"outils\", outils);\n      // On \u00E9crit les raccourcis dans le pied de page\n      const o = document.createElement('div');\n      o.id = 'footer-shortcuts';\n      o.innerHTML = outils.join('&nbsp;&nbsp;');\n      this.footer.appendChild(o); \n    } \n    // On donne les boutons au manager de clavier\n    this.keyManager.keyboardBypass = realButtons;\n  }\n\n\n  /**\n   * Affichage d'un message en haut du panneau.\n   * \n   * @param msg Le message\n   * @param type Le type de message\n   */\n  public flash(msg:string, type: FlashMessageType) {\n    const msgbox = this.messageBox;\n    const o = document.createElement('div');\n    o.className = type;\n    o.innerHTML = msg;\n    msgbox.appendChild(o);\n    msgbox.style.zIndex = '10';\n    msgbox.style.opacity = '1';\n    if ( type === 'notice' ) {\n      // Temporiser le message\n      setTimeout(() => { this.cleanFlash.call(this); }, 10 * 1000);\n    } else if ( type === 'action' ) {\n      // Bloquer le message avec quelques lettres possibles seulement\n    } else {\n      // Sinon, on clique le message pour le fermer\n      o.addEventListener('click', (ev: MouseEvent) => { this.cleanFlash(); });\n    }\n  }\n  public cleanFlash(){ \n    const msgbox = this.messageBox;\n    msgbox.innerHTML = '';\n    msgbox.style.zIndex = '-1';\n    msgbox.style.opacity = '0.6';\n  }\n  public cleanFooterShortcuts(){\n    if ( this.footer.querySelector('div#footer-shortcuts')){\n      (this.footer.querySelector('div#footer-shortcuts') as HTMLElement).remove();\n    }\n  }\n\n  public activateContextualHelp() {\n    this.help.activateContextualHelp();\n  }\n  \n  // ========== M\u00C9THODES D'\u00C9L\u00C9MENT =============\n\n  public getSelection(){ return this.accessTable.getSelection() ; }\n\n  /**\n   * Permet de s\u00E9lectionner avec les tabulations les liens se trouvant \n   * dans le texte (d\u00E9finition pour les entr\u00E9es et content pour les\n   * exemples). Pour permettre de faire Tab+Tab+Tab+Entr\u00E9e pour \n   * rejoindre un lien\n   * \n   * On tient \u00E0 jour une table qui permet de conserver l'indice du \n   * lien derni\u00E8rement s\u00E9lectionn\u00E9.\n   * \n   * @param withMaj Pour savoir si la touche est press\u00E9e (pour remonter les liens)\n   * \n   */\n  public nextLinkSelection(withMaj: boolean){\n    const itemId: string | undefined = this.getSelection();\n    if (itemId === undefined) { return ;}\n    const obj = this.accessTable.getObj(itemId);\n    const ak = this.accessTable.getAccKey(itemId);\n    const links = obj.querySelectorAll('a');\n    if (links.length === 0){ return this.flash('Aucun lien dans cet \u00E9l\u00E9ment\u2026', 'notice'); }\n    let nextSelLink = ak.lastSelectedLink || 0;\n    nextSelLink += withMaj ? -1 : +1;\n    if (nextSelLink === -1) { nextSelLink = links.length; } \n    else if (nextSelLink < 0){ nextSelLink = links.length;} // simple s\u00E9curit\u00E9\n    else if (nextSelLink > links.length) { nextSelLink = 1;}\n    // On d\u00E9selectionne \u00E9ventuellement le dernier lien s\u00E9lectionn\u00E9\n    if (ak.lastSelectedLink){ links[ak.lastSelectedLink -1].classList.remove('current');}\n    const link = links[nextSelLink -1]; \n    link.classList.add('current');\n    ak.lastSelectedLink = nextSelLink;\n    this.flash('Presser \"g\" (comme \"go\") pour rejoindre le lien s\u00E9lectionn\u00E9.', 'notice');\n  }\n  \n  /**\n   * Pour activer le lien s\u00E9lectionn\u00E9 (simuler donc un clique de souris)\n   * (note : \u00E7a se fait avec la touche 'g' comme 'go')\n   */\n  activeLinkSelection(){\n    const itemId: string | undefined = this.getSelection();\n    if (itemId === undefined) { return this.flash('Aucune s\u00E9lection => aucun lien \u00E0 activer\u2026', 'notice'); }\n    const obj = this.accessTable.getObj(itemId);\n    const ak = this.accessTable.getAccKey(itemId);\n    const links = obj.querySelectorAll('a');\n    if (links.length === 0){ return this.flash('Aucun lien dans cet \u00E9l\u00E9ment\u2026', 'notice'); }\n    if (!ak.lastSelectedLink){ return this.flash('Aucun lien n\u2019a \u00E9t\u00E9 s\u00E9lectionn\u00E9\u2026', 'warn');}\n    const selLink = ak.lastSelectedLink ;\n    const alink = links[selLink -1];\n    this.onClickALink(alink);\n  }\n\n  // Re\u00E7oit le click de souris sur un lien dans le texte ou peut \u00EAtre directement \n  // appel\u00E9e pour simuler ce clic.\n  public onClickALink(alink: HTMLElement, ev: KeyboardEvent | undefined = undefined) {\n    console.log(\"Link cliqu\u00E9 depuis texte format\u00E9\", ev);\n    const method: string = String(alink.dataset.method);\n    const id: string = String(alink.dataset.id);\n    (this as any)[method](id);\n\n    ev && stopEvent(ev);\n  }\n\n\n  /**\n   * \n   * M\u00E9thode s\u00E9lectionnant un \u00E9l\u00E9ment. L'op\u00E9ration est complexe car\n   * elle met non seulement en forme l'\u00E9l\u00E9ment dans le DOM, mais elle\n   * conserve en plus l'\u00E9tat de l'\u00E9l\u00E9ment dans l'accessTable et g\u00E8re\n   * la s\u00E9lection (s\u00E9lection qui le moment est simple).\n   */\n  select(itemId: string) {\n    this.accessTable.selectionManager.selectItem(itemId);\n  }\n\n  // Scroll jusqu'\u00E0 l'\u00E9l\u00E9ment et le s\u00E9lectionne\n  scrollToAndSelect(itemId: string){\n    const klass = this._klass;\n    const item = klass.get(itemId);\n    if ( ! item ) { return ; }\n    klass.isVisible(itemId) || klass.setVisible(itemId) ; \n    const ak = klass.getAccKey(itemId) ;\n    this.select(itemId);\n  }\n  public scrollTo(obj: HTMLElement | string) {\n    if ('string' === typeof obj){ obj = this._klass.getObj(obj); }\n    obj.scrollIntoView({behavior: 'auto', block: 'center'});\n  }\n\n  // Pour cr\u00E9er le nouvel \u00E9l\u00E9ment \n  public insertInDom(item: T, before: T | undefined) {\n    const clone = this.cloneItemTemplate() as DocumentFragment;\n    const mainElement = clone.querySelector('.' + this.minName);\n    if (mainElement) {\n      mainElement.setAttribute('data-id', item.id);\n    }\n    // Et on l'ajoute au conteneur\n    if (before) {\n      let beforeObj = this.accessTable.getObj(before.id);\n      if (this.minName === 'exemple') { beforeObj = (beforeObj.previousSibling as HTMLDivElement); }\n      this.container.insertBefore(clone, beforeObj);\n    } else {\n      this.container.appendChild(clone);\n    }\n    // On actualise ou on renseigne ses valeurs\n    this.updateInDom(item);\n  }\n\n  // Pour actualiser les valeurs dans le DOM\n  public updateInDom(item: T): boolean {\n    const obj = this.accessTable.getObj(item.id); // || throwError('item-obj-unfound');\n    if (!obj){\n      this.flash(`Impossible de trouver l'objet DOM de ${item.id}\u2026 Je ne peux pas actualiser l'affichage.`, 'error');\n      return false;\n    }\n    // R\u00E9gler les props\n    // (maintenant, elles peuvent se trouver dans dbData, qui \n    // contient les donn\u00E9es persistantes, ou dans cachedData, qui\n    // contient les donn\u00E9es format\u00E9es)\n    Object.keys(item.dbData).forEach((prop: string) => {\n      let value = ((item.dbData as unknown) as Record<string, string>)[prop] as string;\n      // console.log(\"Actualisation de prop '%s' avec valeur '%s'\", prop, value);\n      this.setPropValue(obj, item, prop, value);\n    });\n    Object.keys(item.cachedData).forEach((prop: string) => {\n      let value = ((item.cachedData as unknown) as Record<string, string>)[prop] as string;\n      this.setPropValue(obj, item, prop, value);\n    });\n    return true;\n  }\n\n  // Pour peupler le panneau\n  public populate(accessTable: AccessTable<any>): void {\n    const container = this.container;\n    container.innerHTML = '';\n    accessTable.each((item: AnyItemType) => { this.insertInDom(item as T, undefined); });\n\n    // Pour op\u00E9rer apr\u00E8s le peuplement du panneau. Par exemple, pour \n    // les exemples, on va ajouter les titres des \u0153uvres.\n    this.afterDisplayItems(accessTable);\n\n    // Pour observer le panneau (les boutons, le champ de filtre, etc.)\n    this.observePanel();\n  }\n\n  private setPropValue(obj: HTMLElement, item: Record<string, any>, prop: string, value: string | number) {\n    // value = String(value);\n    value = this.formateProp(item, prop, value);\n    obj\n      .querySelectorAll(`[data-prop=\"${prop}\"]`)\n      .forEach(element => {\n        if (value.startsWith('<')) {\n          element.innerHTML = value;\n        } else {\n          element.textContent = value;\n        }\n      });\n  }\n\n  // ========== PRIVATE METHODS ==============\n\n  // Pour conserver les s\u00E9lections pr\u00E9c\u00E9dentes et y revenir\n  private previousSelections: string[] = [];\n\n  // Pour la propri\u00E9t\u00E9 public keyManager\n  initKeyManager() {\n    this._keyManager = new VimLikeManager(document.body as HTMLBodyElement, this, this._klass);\n  }\n\n  private cloneItemTemplate(): DocumentFragment {\n    return this.itemTemplate.content.cloneNode(true) as DocumentFragment;\n  }\n  // M\u00E9thode \u00E0 surclasser pour traitement particulier de certaines valeurs\n  // \u00E0 afficher. Mais normalement, elles sont surtout trait\u00E9es lors de la\n  // mise en cache\n  /* surclassed */ protected formateProp(item: any, prop: string, value: string | number | boolean) { return String(value); }\n  /* surclassed */protected afterDisplayItems(accessTable: AccessTable<any>):void {}\n  /* surclassed */ protected searchMatchingItems(searched: string): T[] { return []; }\n  protected observePanel(): void {\n    // \u00C9couter le champ de filtre\n    const field = this.searchInput;\n    field.addEventListener('input', this.filterItems.bind(this));\n    field.addEventListener('keyup', this.filterItems.bind(this));\n    // \u00C9couter le bouton de panique\n    const btnPanic = document.querySelector('.btn-sos') as HTMLAnchorElement;\n    btnPanic.addEventListener('click', this.onClickPanicButton.bind(this));\n  };\n\n  /**\n   * M\u00E9thode appel\u00E9e quand on clique sur le bouton 'SOS' du panneau \n   * courant lorsqu'il est bloqu\u00E9. Pour tenter de d\u00E9bloquer la\n   * situation.\n   * \n   * @param ev \u00C9v\u00E8nement souris qui a g\u00E9n\u00E9r\u00E9 l'appel\n   */\n  onClickPanicButton(ev: MouseEvent){\n    console.log(\"[onClickPanicButton] Tentative de sortie de blocage\");\n    // Si un formulaire \u00E9tait ouvert, on le ferme\n    if (this.form.isActive()){ this.form.cancelEdit(); }\n    // On r\u00E9-initialise les shortcuts\n    this.keyManager.setMode('normal');\n    \n  }\n  /**\n   *  M\u00E9thode de filtrage des \u00E9l\u00E9ments affich\u00E9s.\n   */\n  private filterItems(ev: Event ) {\n    // On supprime toujours la s\u00E9lection courante pour\n    // pouvoir chercher \u00E0 partir du premier visible\n    const selectedItemId = this.getSelection();\n    this.accessTable.selectionManager.deselectCurrent();\n    const searched = this.searchInput.value.trim();\n    const matchingItems: T[] = this.searchMatchingItems(searched);\n    const matchingCount = matchingItems.length;\n    console.log('[CLIENT %s] Filtrage %s - %i founds / %i \u00E9l\u00E9ment', this.titName, searched, matchingCount, this.accessTable.size);\n    const matchingIds = new Set(matchingItems.map((item: T) => item.id));\n    // Avant, on bouclait sur les items (dans accessTable). Mais maintenant,\n    // l'\u00E9tat des \u00E9l\u00E9ments n'\u00E9tant pas consign\u00E9 dans leur item, on boucle\n    // sur leur 'accKey'\n    this.accessTable.eachAccKey((ak: AccedableItem) => {\n      const visible = matchingIds.has(ak.id);\n      const display = visible ? 'block' : 'none';\n      if ( ak.display !== display ) {\n        // Pour le moment, on prend le parti de ne d\u00E9finir l'obj qu'au besoin,\n        // plut\u00F4t que de faire une boucle pour tous les traiter.\n        if (ak.obj === undefined) { ak.obj = this.accessTable.DOMElementOf(ak.id); }\n        ak.obj.style.display = display;\n        ak.display = display ;\n        ak.visible = visible; \n      }\n    });\n    // Si l'item qui \u00E9tait s\u00E9lectionn\u00E9 est toujours visible, on le\n    // res\u00E9lectionne. \n    if (selectedItemId) {\n      const selectedAK: AccedableItem = this.accessTable.getAccKey(selectedItemId);\n      if ( selectedAK.visible === true ) {\n        this.accessTable.selectionManager.reselectItem(selectedItemId);\n      }\n    }\n  }\n\n  /**\n   *  M\u00E9thode fonctionnelle pour retourner une liste d'items filtr\u00E9s\n   * \n   * Note : Cette fonction n'a rien \u00E0 voir avec la m\u00E9thode qui filtre\n   * les items \u00E0 l'affichage (cf. ci-dessus).\n   */\n  filter(accessTable: AccessTable<any>, fnFiltre: (item: AnyItemType) => boolean): AnyItemType[] {\n    return accessTable.findAll(\n      (item: AnyItemType) => { return fnFiltre(item); },\n      {}\n    );\n  }\n\n  // ========== PRIVATE PROPERTIES ===========\n  protected get container(){ return this._container || (this._container = document.querySelector('main#items') as HTMLDivElement);}\n  private get itemTemplate(){ return this._itemTemplate || (this._itemTemplate = document.querySelector('template#item-template') as HTMLTemplateElement);}\n  private get searchInput(){ return this._searchInput || (this._searchInput = document.querySelector('input#search-input') as HTMLInputElement);}\n  public get consoleInput(){return this._consInput || (this._consInput = document.querySelector('input#panel-console') as HTMLInputElement);}\n  private get messageBox(){ return document.querySelector('div#flash-message') as HTMLDivElement;}\n  private get footer(){return document.querySelector('footer') as HTMLElement; }\n  private get help(){return this._help || (this._help = new Help(this));}\n\n  public minName:string;\n  public titName: string;\n  private _klass: typeof Entry | typeof Oeuvre | typeof Exemple;\n  public get accessTable(): AccessTable<any> { return {} as AccessTable<any>; };\n  private _actif: boolean = false;\n  private _container!: HTMLDivElement;\n  private _itemTemplate!: HTMLTemplateElement;\n  private _searchInput!: HTMLInputElement;\n  private _consInput!: HTMLInputElement;\n  protected _keyManager!: VimLikeManager;\n  private consoleManager!: any; // type ConsoleManager\n  private _help!: Help;\n  \n  constructor(data: PanelConstructorData) {\n    this.minName = data.minName;\n    this.titName = data.titName;\n    this._klass = data.klass;\n    this.form = data.form;\n  }\n\n  private setPanelFocus(actif: boolean) {\n    // console.log(\"[setPanelFocus] Focus mis sur le panneau %s\", this.titName);\n    document.body.classList[actif ?'add':'remove']('actif');\n    this._actif = actif ;\n    this.keyManager.setMode('normal');\n  }\n}", "/**\n * Grande classe qui permet de parcourir tr\u00E8s vite les \u00E9l\u00E9ments en\n * sachant s'ils sont visibles, s\u00E9lectionn\u00E9s, etc.\n */\nimport { StringNormalizer } from \"../../bothside/StringUtils\";\nimport { EntryType, OeuvreType, ExempleType, AnyItemType } from \"../../bothside/types\";\nimport { PanelClient } from \"../PanelClient\";\nimport { SelectionManager } from \"./SelectionManager\";\n\n/**\n * Le type propre aux donn\u00E9es enregistr\u00E9es dans les AccessTables de chaque \u00E9l\u00E9ment.\n */\nexport interface AccedableItem {\n  readonly type: 'accedable-item';\n  id: string;         // Identifiant absolu de l'\u00E9l\u00E9ment, quel qu'il soit\n  index: number;      // Index pr\u00E9cis dans l'Array\n  obj: HTMLDivElement | undefined ;        // L'objet HTML de l'\u00E9l\u00E9ment, dans le listing\n  next:  string | undefined ;      // Id de l'\u00E9l\u00E9ment suivant dans l'Array (pas forc\u00E9ment contigu)\n  prev:  string | undefined ;      // Id de l'\u00E9l\u00E9ment pr\u00E9c\u00E9dent dans l'Array (idem)\n  visible: boolean;   // Pour savoir si l'\u00E9l\u00E9ment est visible\n  display: 'block' | 'none';  // Le display actuel de l'\u00E9l\u00E9ment\n  selected: boolean;  // Pour savoir si l'\u00E9l\u00E9ment est s\u00E9lectionn\u00E9\n  modified: boolean;  // Pour savoir si l'item a \u00E9t\u00E9 modifi\u00E9\n  lastSelectedLink?: number | undefined; // L'indice 1-start du dernier lien s\u00E9lectionn\u00E9 dans la d\u00E9finition ou le content de l'exemple (pour s\u00E9lection avec Tab)\n // On pourra ajouter ici d'autres donn\u00E9es volatiles\n}\n\nexport class AccessTable<T extends EntryType | OeuvreType | ExempleType> {\n  // Table des pointeurs de donn\u00E9es\n  keysMap: Map<string, AccedableItem> = new Map();\n  // Table de toutes les donn\u00E9es des items, dans un ordre\n  // d'arriv\u00E9e jamais chang\u00E9.\n  arrayItems: T[] = [];\n  // Table de la table (pour v\u00E9rification)\n  _size!: number | null ;\n  // Le premier item, qui doit forc\u00E9ment \u00EAtre le premier charg\u00E9\n  _firstItem!: T;\n  public get firstItem(){ return this._firstItem || (this._firstItem = this.arrayItems[0]); }\n  _lastItem!: T;\n  public get lastItem(){return this._lastItem || (this._lastItem = this.arrayItems[this.arrayItems.length - 1]);}\n\n  getSelection() { return this.selectionManager.getCurrent(); }\n \n  constructor(\n    public panel: PanelClient<T>,\n    items: T[]\n  ) {\n    this.populateInTable(items);\n  }\n\n  public get selectionManager(){\n    return this._selmanager || (this._selmanager = new SelectionManager(this));\n  }\n  private _selmanager!: SelectionManager;\n  \n  // apr\u00E8s un ajout ou une suppression, par exemple\n  reset(){\n    this._size = null;\n  }\n\n  /**\n   * La fonction g\u00E8re l'\u00E9tat DOM de l'\u00E9l\u00E9ment s\u00E9lectionn\u00E9 ou d\u00E9selectionn\u00E9,\n   * \u00E0 savoir :\n   * - la classe 'selected' de son objet DOM\n   * - la propri\u00E9t\u00E9 @selected de son accKey\n   * \n   * @param id Identifiant de l'\u00E9l\u00E9ment (AnyItemType)\n   * @param state Son nouvel \u00E9tat (true = s\u00E9lectionn\u00E9, false = d\u00E9s\u00E9lectionn\u00E9)\n   */\n  setSelectState(id: string, state: boolean) {\n    // console.log(\"[setSelectState\u00B0 Mettre l'\u00E9tat de l'item '%s' \u00E0 %s\", id, state ? 'true' :'false');\n    const itemAK = this.getAccKey(id);\n    const obj = itemAK.obj || this.getObj(id); // Le d\u00E9finit s'il n'existe pas\n    itemAK.selected = state;\n    obj.classList[state?'add':'remove']('selected');\n  }\n\n  get size(){ return this._size || (this._size = this.keysMap.size);}\n\n  isVisible(id: string) { return this.getAccKey(id).visible === true ;}\n  setVisibility(id: string, state: boolean) {\n    const ak = this.getAccKey(id);\n    if ( ak.visible !== state ) {\n      // <= L'\u00E9tat change => Il faut le changer dans la donn\u00E9e et le DOM\n      ak.visible = state;\n      if ( ak.obj === undefined ) { ak.obj = this.DOMElementOf(id) ; }\n      const display = state ? 'block' : 'none';\n      ak.display = display ;\n      ak.obj.style.display = display ;\n    }\n  }\n\n  // Retourne le premier \u00E9l\u00E9ment visible\n  getFirstVisible(): T | undefined {\n    return this.find((item: T) => this.getAccKey(item.id).visible === true);\n  }\n  // Retourne le dernier \u00E9l\u00E9ment visible\n  getLastVisible(): T | undefined {\n    return this.findLast((item: T) => this.getAccKey(item.id).visible === true);\n  }\n\n  getNextVisible(refId: string | undefined): T | undefined {\n    let ak: AccedableItem | undefined;\n    let icrashLoop = 0;\n    while (refId && (ak = this.getNextAccKey(refId))) {\n      if (ak.visible) {\n        return this.get(ak.id);\n      } else {\n        refId = ak.next;\n      }\n      ++icrashLoop;\n      if (icrashLoop > 100_000){\n        // Normalement, ne devrait pas arriver, mais bon\u2026\n        this.panel.flash('Sortie de boucle sans fin.', 'error');\n        return undefined;\n      }\n    }\n  }\n  getPrevVisible(refId: string | undefined): AnyItemType | undefined {\n    let ak: AccedableItem | undefined;\n    let icrashLoop = 0;\n    while (refId && (ak = this.getPrevAccKey(refId))) {\n      if (ak.visible) {\n        return this.get(ak.id);\n      } else {\n        refId = ak.prev;\n      }\n      ++icrashLoop;\n      if ( icrashLoop > 100_000){\n        // Normalement, ne devrait jamais arriver\n        this.panel.flash('Sortie forc\u00E9e de boucle sans fin.', 'error');\n        return undefined;\n      }\n    }\n  }\n  \n  // @return true si l'\u00E9l\u00E9ment d'identifiant +id+ existe.\n  exists(id: string): boolean { return this.keysMap.has(id); }\n\n  get(id: string): T { return this.arrayItems[(this.keysMap.get(id) as AccedableItem).index]; }\n  getByAccKey(ak: AccedableItem): T { return this.get(ak.id); }\n\n  /**\n   * Retourne l'objet DOM de l'item en s'assurant qu'il est d\u00E9fini\n   * dans l'AccKey (ce qui n'est pas fait par d\u00E9faut)\n   */\n  getObj(id: string): HTMLDivElement {\n    const ak = this.getAccKey(id);\n    if ( ! ak ) {\n      console.error(\"Impossible d'obtenir l'AK de l'id '%s'\u2026\", id, this.arrayItems);\n    }\n    ak.obj || Object.assign(ak, { obj: this.DOMElementOf(id)});\n    if ( ! ak.obj ) {\n      console.error(\"Impossible d'obtenir l'objet de l'item '%'\u2026\", id);\n    }\n    return ak.obj as HTMLDivElement;\n  }\n  \n  getAccKey(itemId: string): AccedableItem { return this.keysMap.get(itemId) as AccedableItem ; }\n\n  /**\n   * Actualise ou Cr\u00E9e le nouvel item Item apr\u00E8s son enregistrement\n   * dans la base de donn\u00E9es.\n   * \n   * Pour savoir si c'est une cr\u00E9ation ou une actualisation, il\n   * suffit de voir si l'identifiant est connu de la table (noter\n   * que pour les exemples, il n'y a pas d'identifiant autre que\n   * volatile).\n   * \n   * Noter que ce sont toujours les donn\u00E9es compl\u00E8tes qui sont\n   * remont\u00E9es, m\u00EAme pour une actualisation. Car l'actualisation\n   * a pu modifier des donn\u00E9es qui servent pour le tri, le formatage,\n   * etc.\n   * \n   * @returns [<item>, <next item>] Pour soit updater les donn\u00E9es pour une\n   * update soit ins\u00E9rer le nouvel \u00E9l\u00E9ment dans le DOM pour une cr\u00E9ation\n   * Note : c'est le panneau qui s'en charge.\n   */\n  public upsert(item: AnyItemType): [T, T | undefined] {\n    // console.log(\"Item re\u00E7u par upsert\", item);\n    const checkedId: string = item.id; \n    let cachedItem;\n    if ( this.exists(checkedId)) {\n      // Update\n      const accKey: AccedableItem = this.getAccKey(checkedId);\n      // console.log(\"Ancienne valeur de l'\u0153uvre\", structuredClone(this.arrayItems[accKey.index]));\n      this.arrayItems[accKey.index] = item as T;\n      // console.log(\"Nouvelle valeur de l'\u0153uvre\", this.arrayItems[accKey.index]);\n      // Pour l'update dans le DOM\n      return [item as T, undefined];\n    } else {\n      // Create\n      // (retour) Pour l'affichage des informations\n      return this.createNewAccedableItem(item as T);\n    }\n  }\n\n  private createNewAccedableItem(newItem: T): [T, T | undefined] {\n    // On cherche sa place en fonction de son identifiant\n    let nextItem: T | undefined = this.find((compItem: T) => { return compItem.id > newItem.id; });\n    // console.log(\"Item apr\u00E8s\", nextItem);\n    let nextItemId: string | undefined, prevItemId: string | undefined, prevItem: T | undefined;\n    let nextAccKey: AccedableItem | undefined;\n    if (nextItem)  {\n      nextItemId = nextItem.id;\n      nextAccKey = this.getAccKey(nextItemId);\n      const prevAccKey: AccedableItem = this.getAccKey(nextAccKey.prev as string);\n      prevItemId = nextAccKey.prev;\n      if (prevItemId) {\n        // Un \u00E9l\u00E9ment pr\u00E9c\u00E9dent existait, il faut d\u00E9crocher le pr\u00E9c\u00E9dent\n        // et le suivant pour ins\u00E9rer le nouvel item\n        Object.assign(prevAccKey, {next: newItem.id});\n        Object.assign(nextAccKey, {prev: newItem.id});\n        // console.log(\"Item avant le nouveau\", this.get(prevItemId), prevAccKey);\n      }\n    } else {\n      // Si le nouvel item n'a pas d'item suivant, c'est qu'il est \n      // le dernier nouvel item. il faut red\u00E9finir this.lastItem\n      this._lastItem = newItem;\n    }\n    const arrayIndex = this.arrayItems.length; // car l'item n'a pas encore \u00E9t\u00E9 ins\u00E9r\u00E9\n    const newAccKey: AccedableItem = this.addInTable(newItem, arrayIndex, nextItemId, prevItemId); \n    // console.log(\"Item nouveau\", newItem, newAccKey);\n    // console.log(\"Item apr\u00E8s le nouveau\", nextItem, nextAccKey);\n    return [newItem, nextItem];\n  }\n  \n  getNextItem(id: string): T | undefined {\n    const nextAK = this.getNextAccKey(id);\n    return nextAK ? this.get(nextAK.id) : undefined ;\n  }\n  \n  getNextItemByAccKey(ak: AccedableItem) : T | undefined {\n    return ak.next ? this.get(ak.next) : undefined ;\n  }\n\n getPrevItem(id: string): T | undefined {\n    const prevAK = this.getPrevAccKey(id);\n    return prevAK ? this.get(prevAK.id) : undefined ;\n  }\n  getPrevItemByAccKey(ak: AccedableItem) : T | undefined {\n    return ak.prev ? this.get(ak.prev) : undefined ;\n  }\n  \n getNextAccKey(id: string): AccedableItem | undefined {\n    const ak = this.getAccKey(id);\n    return ak.next ? this.getAccKey(ak.next) : undefined;\n  }\n getNextAccKeyByAccKey(ak: AccedableItem): AccedableItem | undefined {\n    return ak.next ? this.getNextAccKey(ak.next) : undefined ;\n  }\n \n getPrevAccKey(id: string): AccedableItem | undefined {\n    const ak = this.getAccKey(id);\n    return ak.prev ? this.getAccKey(ak.prev) : undefined;\n  }\n getPrevAccKeyByAccKey(ak: AccedableItem): AccedableItem | undefined {\n    return ak.prev ? this.getPrevAccKey(ak.prev) : undefined ;\n  }\n\n\n  // Boucle sur tous les \u00E9l\u00E9ments (sans retour)\n  each(traverseMethod: (item: T) => void){\n    this.eachSince(traverseMethod, this.firstItem.id);\n  }\n\n  // Boucle depuis l'\u00E9l\u00E9ment d'identifiant +id+\n  eachSince(\n    traverseMethod: (item: T) => any,\n    id: string \n  ){\n    let item: T | undefined = this.get(id);\n    do {\n      if ( item ) {\n        traverseMethod(item);\n        item = this.getNextItem(item.id);\n      } else { break ;}\n    } while ( item ); \n  }\n\n  /**\n   * Boucle sur toutes les AcceedableItem (AccKey/ak)\n   */\n  eachAccKey(fnEach: (ak: AccedableItem) => void ) {\n    this.keysMap.forEach(fnEach);\n  }\n\n  /**\n   * Boucle sur tous les items \u00E0 partir de l'item d'id +id+ en\n   * collectant une donn\u00E9e quelconque.\n   */\n  mapSince(\n    traverseMethod: (item: T) => any,\n    id: string \n  ): any[] {\n    const collected = [];\n    let item: T | undefined = this.get(id);\n    do {\n      if ( item ) {\n        let retour: any = traverseMethod(item);\n        collected.push(retour);\n        item = this.getNextItem(item.id);\n      } else { break ;}\n    } while ( item );\n    return collected;\n  }\n  // Boucle sur TOUTES les donn\u00E9es en collectant une donn\u00E9e\n  map(\n    traverseMethod: (item: T) => any\n  ): any[] {\n    return this.mapSince(traverseMethod, this.firstItem.id);\n  }\n\n  /**\n   * M\u00E9thode qui boucle sur tous les \u00E9l\u00E9ments depuis l'\u00E9l\u00E9ment d'id\n   * +itemId+ et retourne une Map avec en cl\u00E9 l'identifiant de\n   * l'item et en valeur la valeur retourn\u00E9e par la m\u00E9thode\n   * +traverseMethod+\n   */\n  collectSince(\n    traverseMethod: (item: T) => any,\n    itemId: string \n  ): Map<string, any> {\n    const collected: Map<string, any> = new Map() ;\n    let item: T | undefined = this.get(itemId);\n    do {\n      if ( item ) {\n        let retour: any = traverseMethod(item);\n        collected.set(item.id, retour);\n        item = this.getNextItem(item.id);\n      } else { break ;}\n    } while ( item );\n    return collected;\n  }\n  // Boucle sur tous les \u00E9l\u00E9ments en r\u00E9coltant une valeur qu'on met\n  // dans une Map qui a en cl\u00E9 l'identifiant de l'item\n  collect(traverseMethod: (item: T) => any): Map<string, any> {\n    return this.collectSince(traverseMethod, this.firstItem.id);\n  }\n \n /**\n  * Boucle sur les items, depuis l'item d'identifiant +id+ ou depuis le premier et \n  * retourne le premier qui r\u00E9pond \u00E0 la condition +condition+\n  */ \n  find(\n    condition: (item: T) => boolean, \n  ): T | undefined {\n    return this.findAfter(condition, undefined);\n  }\n  findLast(\n    condition: (item: T) => boolean\n  ): T | undefined {\n    return this.findLastBefore(condition, undefined);\n  }\n  \n  findLastBefore(\n    condition: (item: T) => boolean,\n    id: string | undefined\n  ): T | undefined {\n    let item: T | undefined;\n    if ( id === undefined) {\n      item = this.lastItem;\n    } else {\n      item = this.getPrevItem(id);\n    }\n\n    let found: T | undefined = undefined;\n    do {\n      if (item) {\n        if (condition(item) === true) {\n          found = item;\n          break;\n        }\n        // Sinon, on prend l'item pr\u00E9c\u00E9dent\n        item = this.getPrevItem(item.id);\n      }\n\n    } while (item);\n    return found;\n  }\n\n  findAfter(\n    condition: (item: T) => boolean,\n    id: string | undefined\n  ): T | undefined {\n    let item: T | undefined ;\n    if ( id === undefined ) {\n      item = this.firstItem ;\n    } else {\n      item = this.getNextItem(id);\n    }\n    let found: T | undefined ;\n    do {\n      if ( item ) {\n        if (condition(item) === true ) { \n          found = item;\n          break ;\n        }\n        item = this.getNextItem(item.id);\n      }\n    } while ( item ); \n    return found ; \n  }\n  \n  /**\n   * Recherche dans l'ordre tous les \u00E9l\u00E9ments r\u00E9pondant \u00E0 la condition +condition+\n   * \n   * @param condition Methode qui doit retourner true pour que l'item soit retenu\n   * @param options   Table d'options {count: nombre attendu} \n   * @returns \n   */\n  findAll(condition: (item: T) => boolean, options: {[k:string]: any}){\n    return this.findAllAfter(condition, undefined, options);\n  }\n\n  // Idem que pr\u00E9c\u00E9dente mais permet de sp\u00E9cifier le premier \u00E9l\u00E9ment\n  findAllAfter(\n    condition: (item: T) => boolean,\n    id: string | undefined,\n    options: {[k:string]: any}\n  ) {\n    const collected: T[] = [];\n    let collected_count = 0;\n\n    let item: T | undefined ;\n    if ( id === undefined ) {\n      item = this.firstItem;\n    } else {\n      item = this.getNextItem(id);\n    }\n    do {\n      if ( item ) {\n        if (condition(item) === true ) { \n          collected.push(item);\n          collected_count ++ ;\n          if ( options.count && collected_count === options.count) { break ;}\n        }\n        item = this.getNextItem(item.id);\n      }\n    } while ( item ); \n    return collected ; \n  }\n\n  /**\n   * Peuplement de la table d'acc\u00E8s avec cr\u00E9ation des 'chainedItem'\n   * \n   * @param items Les \u00E9l\u00E9ments transmis, tels que relev\u00E9s dans les tables (Entry, Oeuvre, Exemple);\n   */\n  // M\u00E9thode qui \"initie\" la table d'acc\u00E8s en transformant chaque\n  // item (Entry, Oeuvre, Exemple) en un AccedableItem, en prenant\n  // son index et son index suivant pour les mettres dans la Map\n  // qui consignes les valeurs d'acc\u00E8s\n  populateInTable(items: T[]) {\n    this.keysMap = new Map();\n    this.arrayItems = [];\n    for (let i: number = 0, len = items.length; i < len; ++i) {\n      const item = items[i];\n      const nextItemId: string | undefined = items[i + 1]?.id || undefined;\n      const prevItemId: string | undefined = items[i - 1]?.id || undefined;\n      this.addInTable(item, i, nextItemId, prevItemId);\n    }\n  }\n\n  // Insertion s\u00E9par\u00E9e pour pouvoir ajouter en cours de travail\n  addInTable(\n    item: T, \n    arrayIndex:number, \n    nextItemId: string | undefined, \n    prevItemId: string | undefined\n  ): AccedableItem {\n    const chained: AccedableItem = {\n      type: 'accedable-item',\n      id: item.id,\n      obj: undefined,\n      index: arrayIndex,\n      next: nextItemId,\n      prev: prevItemId,\n      visible: true,\n      display: 'block',\n      selected: false,\n      modified: false\n    };\n     // console.log(\"[POPULATE ACCESSTABLE] ak = \", chained);\n    this.keysMap.set(item.id, chained);\n    this.arrayItems.push(item);\n    return chained;\n  }\n\n  DOMElementOf(id: string) {\n    return document.querySelector(`main#items > div[data-id=\"${id}\"]`) as HTMLDivElement;\n  }\n\n\n  /**\n   * \n   * \n   * ========== FONCTIONS SP\u00C9CIALIS\u00C9ES ==========\n   * \n   * \n   * \n   */\n  private get wordset(){\n    return this._wordset || (this._wordset = this.getListMotsForAutocomplete());\n  }\n  private _wordset?: {key: string, value: string, min: string}[];\n\n  /**\n   * @api\n   * \n   * M\u00E9thode filtrage des mots, pour l'autocompletion\n   * \n   * @param text Le texte recherch\u00E9 dans les entr\u00E9es\n   */\n  public filterWithText(text: string){\n    text = StringNormalizer.rationalize(text);\n    return this.wordset.filter((item: any) => item.min.startsWith(text));\n  }\n\n  /**\n   * Pour l'autocompl\u00E9tion dans le champ d\u00E9finition (et peut-\u00EAtre\n   * exemple, mais plus compliqu\u00E9) on a besoin de la liste des mots\n   * pr\u00E9par\u00E9es\n   * \n   */\n  getListMotsForAutocomplete(){\n    if ( this.firstItem.cachedData.itemType !== 'entry' ) { return [];}\n    /*\n    // Pour des essais simples\n    return [\n      {key: 'abandon', value: 'Abandon'},\n      {key: 'abime', value: 'Ab\u00EEme'},\n      {key: '\u00E7a', value: 'le \u00C7a'},\n      {key: '\u00E9t\u00E9', value: 'L\u2019\u00E9t\u00E9'}, \n      {key: 'eternel', value: \"\u00C9ternel\"}\n    ];\n    //*/\n    return this.map((item) => { \n      return {\n        key: item.id, \n        value: (item as EntryType).dbData.entree,\n        min: (item as EntryType).cachedData.entree_min_ra\n      } ;\n    });\n  }\n}", "/**\n * ComplexRpc\n * \n * Cette classe est amen\u00E9e \u00E0 g\u00E9rer des traitements complexes car :\n *  - asynchrone\n *  - en Rpc\n * \n * Il a \u00E9t\u00E9 inaugur\u00E9 pour faire \u00E7a : \n * Au cours du test de l'enregistrement d'une Entr\u00E9e, on doit v\u00E9rifier si toutes les\n * oeuvres cit\u00E9es existent et produire une erreur le cas \u00E9ch\u00E9ant. La m\u00E9thode de\n * check doit en m\u00EAme temps attendre et envoyer une chaine de notifications \n * panneau -> extension -> panneau complexe.\n * \n * Pour g\u00E9rer \u00E7a, on fait une Promise en gardant dans l'instance ComplexRpc (rep\u00E9r\u00E9e\n * par un identifiant)) le 'resolve' pour ne le jouer que lorsque tout est fini.\n * \n * Fonctionnement :\n * \n *    Dans le flux\n *    ------------\n *    const params = {...};\n *    const comp = new ComplexRpc({call: this.maFonctionInitiale.bind(this, params)});\n *    const res = await comp.run();\n * \n *    Quelque part\n *    ------------\n *    maFonctionInitiale(liste: string[], compRpcId: string): void {\n *      // Ici on fait l'appel qu'on doit faire, en transmettant l'identifiant\n *      // Par exemple :\n *      RpcEntry.notify('check-oeuvres', {CRId: compRpcId, oeuvres: liste})\n *    }\n * \n *    // Et dans la fonction finale qui re\u00E7oit le r\u00E9sultat du check\n *    RpcEntry.on('check-oeuvres-resultat', (params) => {\n *      ComplexRpc.resolveRequest(params.CRId, params.resultat);\n *      // Bien s\u00FBr, il faut s'assurer que CRId a bien \u00E9t\u00E9 transmis\n *      // partout, \u00E0 toutes les fonctions\n *    });\n * \n */\n\nexport class ComplexRpc {\n  static requestTable: Map<string, ComplexRpc> = new Map();\n  \n  static addRequest(req: ComplexRpc) {\n    this.requestTable.set(req.id, req);\n  }\n  \n  // \u00C0 appeler \u00E0 la fin, pour r\u00E9soudre\n  static resolveRequest(requestId: string, params: any) {\n    (this.requestTable.get(requestId) as ComplexRpc).resolve(params);\n  }\n\n  public id: string;\n  private call: Function; // Fonction qui va lancer l'appel (re\u00E7oit en DERNIER argument l'identifiant de cette instance \u2014 pour le transmettre)\n  private ok!: Function; // le 'resolve' de new Promise((resolve, reject) => {})\n  private ko!: Function; // le reject de new Promise((resolve,reject) => {})\n\n  constructor(param: {\n    call: Function,\n  }) {\n    this.id = crypto.randomUUID();\n    this.call = param.call;\n    ComplexRpc.addRequest(this);\n  }\n\n  run() { \n    return new Promise( (ok, ko) => {\n      this.ok = ok;\n      this.ko = ko;\n      setTimeout(this.ko.bind(this, 'timeout-20'), 10 * 10000);\n      this.call(this.id);\n    });\n  }\n\n  resolve(params: any){\n    this.ok(params);\n  }\n}", "import { PanelClient } from \"../PanelClient\";\nimport { EntryType, OeuvreType, ExempleType, AnyDbType, AnyItemType, DBEntryType, DBOeuvreType, DBExempleType } from \"../../bothside/types\";\n\n// Type pour la d\u00E9finition d'une propri\u00E9t\u00E9\nexport interface FormProperty {\n  propName: string;\n  type: typeof String | typeof Number | typeof Boolean;\n  required: boolean;\n  no_shortcut?: boolean;\n  fieldType: 'text' | 'select' | 'textarea' | 'checkbox' | 'radio';\n  field?: any; // renseign\u00E9 \u00E0 la v\u00E9rificatiaon\n  values?: string[][];\n  default?: any;\n  locked?: boolean; // si true, le champ est verrouill\u00E9\n  onChange?(): void; // la fonction optionnelle \u00E0 appeler en cas de changement de cette propri\u00E9t\u00E9\n}\n\ntype FieldType = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\nexport interface ChangeSetType {\n  [x: string]: any;\n  isNew: boolean;\n  size: number;\n}\n\ninterface EditedEntryType /* pour \"Type de l'item \u00E9dit\u00E9 */ extends DBEntryType {\n  // Pour mettre les changements effectu\u00E9s\n  changeset: ChangeSetType;\n  // Pour mettre les donn\u00E9es initiales de l'item\n  original: DBEntryType;\n  data2save?: DBEntryType;\n}\ninterface EditedOeuvreType extends DBOeuvreType {\n  changeset : ChangeSetType;\n  original: DBOeuvreType;\n  data2save?: DBOeuvreType;\n}\ninterface EditedExempleType extends DBExempleType {\n  changeset: ChangeSetType;\n  original: DBExempleType;\n  data2save?: DBExempleType;\n}\ntype EditedIType = EditedEntryType | EditedOeuvreType | EditedExempleType; \n\n/**\n * Classe pour \u00E9tendre le formulaire de chaque \u00E9l\u00E9ment\n */\n\nexport abstract class FormManager<T extends AnyItemType, Tdb extends AnyDbType> {\n\n  abstract formId: string; // Identifiant unique du formulaire\n  abstract prefix: string; // utilis\u00E9 pour nommer les champs\n  abstract properties: FormProperty[];\n  abstract tableKeys: Record<string, {lab: string, fn: Function}>; // table des raccourcis propres\n  private tablePropertiesByPropName!: Map<string, FormProperty>;\n  abstract afterEdit(): void; // \u00E0 faire apr\u00E8s l'\u00E9dition d'un \u00E9l\u00E9ment\n  abstract onSaveEditedItem(data: Tdb): Promise<boolean>; // Fonction pour sauver (appel\u00E9e quand on sauve la donn\u00E9e)\n  async checkEditedItem(): Promise<string | undefined> { return undefined ; }; // Pour checker les donn\u00E9es \n  onCancel?(): void; // Fonction appel\u00E9e en cas d'annulation\n  abstract observeForm(): void; // fonction d'observation propre du formulaire\n  onFocusForm?(ev: FocusEvent | undefined): any;\n  public panel!: PanelClient<AnyItemType>; // le panneau contenant le formulaire\n  public saving: boolean = false;\n  // Les propri\u00E9t\u00E9s \u00E0 retirer des donn\u00E9es \u00E0 finalement sauver.\n  // Note: les propri\u00E9t\u00E9s isNew et size sont d\u00E9j\u00E0 trait\u00E9es\n  /* surclasser (if any) */ propsToRemove(): string[] {return [];}\n\n  // Pour savoir si une \u00E9dition est en cours\n  // if this.form.isActive()\n  public isActive(){\n    return !this.obj.classList.contains('hidden');\n  }\n \n  // Maintenant c'est celui-ci\n  protected editedItem!: EditedIType | undefined;\n  public getEditedItem(){ return this.editedItem;}\n\n  private checked: boolean = false;\n\n  private _obj!: HTMLFormElement; // le formulaire complet\n  get obj(){\n    return this._obj || (this._obj = document.querySelector(`form#${this.formId}`) as HTMLFormElement);\n  }\n\n  // raccourci\n  private setMode(mode: 'form' | 'edit' | 'normal') {\n    this.panel.keyManager.setMode(mode);\n  }\n  /**\n   * @api\n   * Point d'entr\u00E9e de l'\u00E9dition, on envoi l'item \u00E0 \u00E9diter. La manager\n   * affiche ses donn\u00E9es et affiche le formulaire.\n   * \n   * @param item Objet Entry, Oeuvre ou Exemple \u00E0 \u00E9diter/cr\u00E9er\n   */\n  public editItem(item: T): void {\n    // console.log(\"\u00C9dition de l'item\", item);\n    const isNewItem = item.id === '';\n    this.panel.context = isNewItem ? 'create-element' : 'edit-element';\n    const originalData: Tdb = isNewItem ? {} as Tdb : structuredClone(item.dbData) as Tdb;\n    this.editedItem /* EditedIType */ = Object.assign(originalData, {\n      original: structuredClone(originalData),\n      changeset: {size: 0, isNew: isNewItem}\n    }) as any as EditedIType;\n    this.openForm();\n    this.dispatchValues(item);\n    if ( 'function' === typeof this.afterEdit ) { this.afterEdit.call(this); }\n    this.setMode('form');\n  }\n\n  public async saveItem(andQuit: boolean): Promise<void> {\n    const res = await this.itemIsNotSavable();\n    if (res) { return ;}\n    if ( this.editedItem){\n      let data2save = structuredClone(this.editedItem.changeset) as any as Tdb;\n      this.editedItem.data2save = data2save;\n    }\n    const map = new Map();\n    map.set('o', this.onConfirmSave.bind(this, andQuit));\n    map.set('n', this.cancelEdit.bind(this));\n    this.panel.flashAction(\n      \"<b>\uD83D\uDC4D Donn\u00E9e valid\u00E9e \uD83C\uDF89</b><br />Confirmes-tu la sauvegarde ? (o = oui, n = non)\", map\n    );\n  }\n\n  private async itemIsNotSavable(): Promise<boolean> {\n    this.panel.cleanFlash();\n    this.collectValues(); // maintenant les met dans this.editedItem\n    const item = this.editedItem as Record<string, any>;\n    this.properties.forEach(dproperty => {\n      const prop = dproperty.propName;\n      // console.log(\"Propri\u00E9t\u00E9 '%s' | Original: '%s' | New: '%s'\", prop, item.original[prop], item[prop]);\n      if ( item[prop] !== item.original[prop] && this.editedItem) {\n        Object.assign(this.editedItem.changeset, {\n          [prop]: item[prop],\n          size: ++item.changeset.size\n        });\n      }\n    });\n    // console.log(\"Item \u00E0 enregistrer\", this.editedItem);\n    if ( this.itemIsEmpty()) {\n      this.panel.flash(\"Aucune donn\u00E9e n'a \u00E9t\u00E9 founie\u2026\", 'error');\n      return true;\n    } \n    if (this.editedItem && this.editedItem.changeset.size === 0 ) {\n      this.panel.flash(\"Les donn\u00E9es n'ont pas chang\u00E9\u2026\", 'warn');\n      return true;\n    }\n    let invalidity: string | undefined = await this.checkEditedItem();\n    console.log(\"=== FIN DU CHECK DE L'ITEM ===\");\n    if (invalidity) {\n      this.panel.flash(\"Les donn\u00E9es sont invalides : \" + invalidity, 'error');\n      return true;\n    }\n    return false; // enregistrable\n  }\n\n  /**\n   * M\u00E9thode appel\u00E9e apr\u00E8s confirmation de la sauvegarde.\n   * \n   * Elle finalise la donn\u00E9e finale \u00E0 enregistrer, notamment en \n   * retirant les propri\u00E9t\u00E9s non persistantes.\n   */\n  public async onConfirmSave(andQuit: boolean): Promise<void> {\n    // console.log(\"Sauvegarde confirm\u00E9e\");\n    const fakeItem = this.collectValues();\n    // Donn\u00E9es persistantes\n    if (this.editedItem) {\n      const data2save: Tdb = structuredClone(this.editedItem.original) as Tdb;\n      Object.assign(data2save, this.editedItem.data2save);\n      // Donn\u00E9es particuli\u00E8res \u00E0 retirer\n      const removedProps = ['isNew', 'size'];\n      removedProps.push(...this.propsToRemove());\n      // console.log(\"Propri\u00E9t\u00E9s \u00E0 remover\", removedProps);\n      const data2saveEpured = {};\n      for (var k in data2save) {\n        if (removedProps.includes(k)) { continue; }\n        Object.assign(data2saveEpured, { [k]: data2save[k] });\n      }\n      console.log(\"Donn\u00E9es FINALES \u00E0 sauvegarder\", structuredClone(data2saveEpured));\n      await this.onSaveEditedItem(data2saveEpured as Tdb);\n    }\n    this.saving = false;\n    if (andQuit) { this.closeForm(); }\n  }\n\n  private itemIsEmpty(): boolean {\n    var isEmpty = true;\n    const item = this.editedItem as Record<string, any>;\n    this.properties.forEach(dprop => {\n      if (!isEmpty) { return ;}\n      if ( item[dprop.propName] !== '' ) { isEmpty = false; }\n    });\n    return isEmpty;\n  }\n\n  public cancelEdit(): void {\n    // console.log(\"Cancel \u00E9dition\");\n    this.saving = false;\n    this.__onCancel();\n  }\n\n  // Met les donn\u00E9es dans le formulaire\n  dispatchValues(item: T){\n    this.reset();\n    const itemVals = item as {[x: string]: any};\n    this.properties.forEach( dprop => {\n      const prop = dprop.propName;\n      const value = itemVals.dbData && (itemVals.dbData[prop] || itemVals.cachedData[prop]);\n      if ( value ) { \n        // console.log(\"Propri\u00E9t\u00E9 %s mise \u00E0 %s\", prop, data[prop]);\n        this.setValueOf(prop, String(value));\n        // Si le champ doit \u00EAtre verrouill\u00E9\n        if (dprop.locked) { dprop.field.disabled = true; }\n      } else {\n        console.log(\"La valeur de la propri\u00E9t\u00E9 %s n'est pas d\u00E9finie dans \", prop, item);\n      }\n    });\n  }\n\n  // Retourne le champ de la propri\u00E9t\u00E9 +prop+\n  // (note : ces champs ont \u00E9t\u00E9 v\u00E9rifi\u00E9s au d\u00E9but)\n  field(prop: string): FieldType {\n    if ( false === this.domCache.has(prop)) {\n      const sel = `#${this.prefix}-${prop}`;\n      const fld = this.obj.querySelector(sel) as FieldType;\n      fld || console.error(\"Bizarrement, le champ %s est introuvable (%s)\", sel, prop);\n      this.domCache.set(prop, fld);\n    }\n    return this.domCache.get(prop) as FieldType;\n  }\n  domCache: Map<string, HTMLElement> = new Map();\n\n  // R\u00E9cup\u00E8re les donn\u00E9es dans le formulaire et retourne l'item\n  // avec ses nouvelles donn\u00E9es.\n  collectValues() {\n    if (this.editedItem) {\n      this.properties.forEach(dprop => {\n        const prop = dprop.propName;\n        const value = this.getValueOf(dprop);\n        this.editedItem && Object.assign(this.editedItem, { [prop]: value });\n      });\n    }\n  }\n\n  /**\n   * Pendant de la pr\u00E9c\u00E9dente, donne la valeur +value+ \u00E0 la propri\u00E9t\u00E9\n   * +property+\n   */\n  setValueOf(property: string, value: any) {\n    const propData = this.tablePropertiesByPropName.get(property) as FormProperty;\n    switch (propData.fieldType) {\n      case 'checkbox':\n      case 'radio':\n        propData.field.checked = value;\n        break;\n      default:\n        propData.field.value = value;\n    }\n  }\n  /**\n   * Retourne la valeur de la propri\u00E9t\u00E9 +foo+\n   * \n   * @param foo Nom de la propri\u00E9t\u00E9 dont il faut retourne la valeur\n   * @returns Retourne la valeur de la propri\u00E9t\u00E9 en fonction de son type\n   */\n  getValueOf(foo: string | FormProperty): string | number | boolean | null {\n    if ( 'string' === typeof foo ) {\n      return this.getValueOfByPropName(foo);\n    } else {\n      return this.getValueOfByPropData(foo);\n    }\n  }\n\n  getValueOfByPropName(propName: string) {\n    const propData = this.tablePropertiesByPropName.get(propName) as FormProperty;\n    return this.getValueOfByPropData(propData);\n  }\n  getValueOfByPropData(property: FormProperty): string | number | boolean | null {\n    const prop = property.propName;\n    const field = this.field(prop);\n    // R\u00E9cup\u00E9rer la valeur dans le formulaire (en fonction du champ)\n    let value: any = ((ft) => {\n      switch (ft) {\n        case 'checkbox': return (field as HTMLInputElement).checked;\n        case 'radio': return (field as HTMLInputElement).checked;\n        default: return field.value;\n      }\n    })(property.fieldType);\n    // TODO Traiter la valeur en fonction de son type\n    return value ;\n  }\n\n  openForm(){\n    this.checked || this.checkFormManagerValidity();\n    if (this.checked === false) { return; }\n    this.obj.classList.remove('hidden'); \n  }\n  closeForm(){ \n    this.obj.classList.add('hidden'); \n    this.setMode('normal');\n    this.editedItem = undefined;\n  }\n\n \n  // Tout remettre \u00E0 rien (vider les champs)\n  reset(){\n    this.properties.forEach(dprop => {\n      switch(dprop.fieldType) {\n        case 'checkbox':\n          dprop.field.checked = dprop.default || false;\n          break;\n        case 'textarea':\n          dprop.field.value = '';\n          break;\n        case 'select':\n          dprop.field.selectedIndex = 0;\n          break;\n        default: \n          dprop.field.value = dprop.default || '';\n      }\n    });\n  }\n\n  async __onSaveEditedItem(){\n    return this.saveItem(false);\n  }\n  async __onSaveEditedItemAndQuit(): Promise<void>{\n    await this.saveItem(true);\n  }\n  __onCancel(){\n    this.closeForm();\n  }\n  __onFocusOnForm(ev: FocusEvent | undefined) {\n    if ('function' === typeof this.onFocusForm) { this.onFocusForm.call(this, ev); }\n    (this.panel as PanelClient<AnyItemType>).keyManager.setMode('form');\n  }\n\n  public setPanel(panel: PanelClient<AnyItemType>) {\n    this.panel = panel;\n  }\n  // === M\u00C9THODES DE VALIDATION DES DONN\u00C9ES D'IMPL\u00C9MENTATION ===\n  // (les donn\u00E9es suivantes s'assurent que le formulaire est\n  //  conforme aux attentes)\n  // La m\u00E9thode sert aussi \u00E0 observer les \u00E9l\u00E9ments\n  checkFormManagerValidity(){\n    if ( ! this.obj ) {\n      console.error('Le formulaire form#%s est introuvable.', this.formId);\n      return false;\n    }\n   /**\n     * Check de la conformit\u00E9 des boutons et leurs m\u00E9thodes\n     */\n    if (false === this.checkBoutonsValidity()) { return false; }\n    /**\n     * On inscrit les aides raccourcis clavier dans le footer\n     */\n    this.inscritAideInFooter();\n     /**\n     * Observation des boutons principaux\n     */\n    this.observeButtons();\n    /**\n     * Check de la conformit\u00E9 des propri\u00E9t\u00E9s, on en profite aussi\n     * pour d\u00E9finir des valeurs (container, erreur, etc.)\n     */\n    if ( false === this.checkPropertiesValidity() ) { return false ; }\n\n    // console.info(\"Formulaire %s valide.\", this.formId);\n\n    /**\n     * Observation propre de chaque formulaire (la fonction est \n     * imp\u00E9rativement impl\u00E9ment\u00E9)\n     */\n    this.__observeForm();\n    this.observeForm();\n\n    this.checked = true;\n  }\n  inscritAideInFooter(){\n    let aide = '<shortcut>q</shortcut><span>Renoncer</span><shortcut>s</shortcut><span>Enregistrer</span><shortcut>w</shortcut><span>Enregistrer et finir</span>';\n    (this.obj.querySelector('div#footer') as HTMLElement).innerHTML = aide;\n  }\n  checkBoutonsValidity(): boolean {\n    let ok = true;\n    // Note : les boutons g\u00E9n\u00E9raux (Save, Renoncer, etc. on \u00E9t\u00E9 supprim\u00E9s au profit des raccourcis clavier)\n    return ok;\n  }\n  // Observation du formulaire\n  __observeForm() { \n    // On s\u00E9lectionne toujours le contenu d'un champ (sauf textarea)\n    this.obj.querySelectorAll('text[type=\"text\"]').forEach(o => {\n      o.addEventListener('focus', (ev) => { (o as HTMLInputElement).select(); });\n    });\n\n    // On r\u00E8gle le changement de mode suivant qu'on focusse dans un\n    // champ \u00E9ditable ou qu'on en blure\n    (this.panel as PanelClient<AnyItemType>).keyManager.discrimineFieldsForModeIn(this.obj, {edit: 'edit', normal: 'form'});\n  }\n  \n  focusField(indice: number) {\n    const dproperty = this.properties[indice - 1];\n    let curIndice = 0;\n    let foundProp: FormProperty | undefined = undefined;\n    this.properties.forEach((dprop) => {\n      if (foundProp) {return; /* acc\u00E9l\u00E9rateur\u2026 */}\n      if (dprop.no_shortcut) { return; }\n      curIndice ++;\n      if ( curIndice === indice) { foundProp = dprop; }\n    });\n    if (foundProp) { (foundProp as FormProperty).field.focus(); }\n  }\n\n  // S'il y a un champ d'identifiant, cette fonction permet de le d\u00E9loquer\n  toggleIdLock() {\n    const idField = this.field('id');\n    if (!idField) { return; }\n    let isLocked = idField.dataset.state === 'locked';\n    this.setIdLock(!isLocked);\n  }\n  setIdLock(isLocked: boolean) {\n    const idField = this.field('id');\n    idField.dataset.state = isLocked ? 'locked' : 'unlocked';\n    idField.disabled = isLocked;\n    const btn = this.obj.querySelector('.btn-lock-id');\n    if (btn) { idField.innerHTML = isLocked ? '\uD83D\uDD12' : '\uD83D\uDD13'; }\n  }\n  // Observation des boutons principaux\n  observeButtons(){\n  }\n\n  checkPropertiesValidity(): boolean {\n    let ok = true ;\n    const lettres = 'abcdefghijkl'.split('').reverse();\n    // On va en profiter pour mettre les donn\u00E9es des propri\u00E9t\u00E9s dans\n    // une table pour les r\u00E9cup\u00E9rer facilement\n    this.tablePropertiesByPropName = new Map();\n\n    this.properties.forEach( (dproperty) => {\n      const prop = dproperty.propName;\n      this.tablePropertiesByPropName.set(prop, dproperty);\n      const prefix = this.prefix;\n      const prefprop = `${prefix}-${prop}`;\n      // Chaque propri\u00E9t\u00E9 doit avoir son conteneur de nom '<propName>-container'\n      const container = this.obj.querySelector(`#${prefprop}-container`);\n      if (container) {\n        const label = ((container as HTMLElement).querySelector('label') as HTMLElement);\n        let shortcut: string;\n        if (dproperty.no_shortcut) {\n          shortcut = '';\n        } else {\n          shortcut = '<shortcut>' + lettres.pop() + '</shortcut>\u00A0';\n        }\n        label.innerHTML = shortcut + label.innerHTML;\n        Object.assign(dproperty, { container: container });\n      } else {\n        console.error('La propri\u00E9t\u00E9 \"%s\" devrait \u00EAtre dans un conteneur d\u2019identifiant \"#%s-container\"', prop, prefprop);\n        ok = false;\n      }\n      // Est-ce que chaque propri\u00E9t\u00E9 est bien dans son champ ?\n      let propTag = String(dproperty.fieldType);\n      if ( ['text', 'checkbox', 'radio'].includes(propTag)) { propTag = 'input';}\n      const fieldSelector = `${propTag}#${prefprop}`;\n      let propField = this.obj.querySelector(fieldSelector);\n      if ( propField ) {\n        switch(dproperty.fieldType) {\n          case 'checkbox': propField = propField as HTMLInputElement; break;\n          case 'textarea': propField = propField as HTMLTextAreaElement; break;\n          default: propField = propField as HTMLInputElement;\n        }\n        Object.assign(dproperty, { field: propField });\n\n        /**\n         * S'il faut observer le champ (si par exemple onChange est d\u00E9fini), alors\n         * l'observer\n         */\n        if ( dproperty.onChange ) {\n          propField.addEventListener('change', dproperty.onChange);\n        }\n\n      } else {\n        console.error('Le champ %s pour la propri\u00E9t\u00E9 %s devrait exister.', fieldSelector, prop);\n        ok = false;\n      }\n      // Un champ select doit avoir des valeurs\n      // Et on en profite pour les mettre\n      if ( dproperty.fieldType === 'select' ) {\n        if ( dproperty.values ) {\n          const field = dproperty.field;\n          field.innerHTML = '';\n          dproperty.values.forEach( paire => {\n            let [value, title] = paire;\n            title = title || value;\n            const opt = document.createElement('option');\n            opt.value = value;\n            opt.innerHTML = title;\n            field.appendChild(opt);\n          });\n        } else {\n          console.error('Le champ %s, de type select, devrait d\u00E9finir ses valeurs (values)', prop);\n          ok = false;\n        }\n      }\n      \n\n    });\n    \n    return ok;\n  }\n}", "/**\n * Pour la gestion de l'acc\u00E8s \u00E0 TMDB, les informations sur les\n * films.\n *\n */\n\nimport { RpcOeuvre } from \"../models/Oeuvre\";\nimport { FlashMessageType } from \"../PanelClient\";\nimport { stopEvent } from \"./DomUtils\";\nimport { FormManager } from \"./FormManager\";\n\ninterface OeuvreType {\n  id: string;\n  tmdbId: string;\n  imdbId?: string;\n  titre: string;\n  titre_original: string;\n  titre_francais?: string;\n  resume: string;\n  annee: string;\n  director?: string;\n  auteurs?: string;\n  langue: string | undefined;\n  pays: string | undefined;\n  editeur?: string | undefined,\n  isbn?: string | undefined,\n}\n\nexport interface OptionsOeuvre {\n  type: string | 'film' | 'roman' | undefined;\n  annee: number | undefined;\n  langue: string | undefined;\n  [x: string]: any;\n}\n\n/**\n * Classe qui permet vraiment de choisir l'\u0153uvre finale, qu'elle \n * vienne de TMDB (IMDB) ou de Wikip\u00E9dia\n */\nexport class OeuvrePicker {\n  // Le formulaire (transmis par la fen\u00EAtre principale)\n  private static form: FormManager<any, any>;\n\n  /**\n   * @api\n   * \n   * Entr\u00E9e pour pouvoir trouver les informations d'un oeuvre.\n   * \n   * Fonctionnement\n   * --------------\n   *  - On rel\u00E8ve tous les titres possibles (sur TMDB (films) ou WikiPedia)\n   *  - S'ils sont plus de 5, on les filtres par les options\n   *  - S'ils sont toujours plus de 5, on demande de faire un premier choix,\n   *    avec les donn\u00E9es simples.\n   *  - On rel\u00E8ve les informations compl\u00E8tes des oeuvres restantes\n   *  - On les affiche en boucle pour pouvoir en choisir une.\n   * \n   * @param titre Le titre \u00E0 trouver\n   * @param options Options pour faciliter la recherche\n   * @param form Formulaire dans lequle mettre les r\u00E9sultats\n   */\n  public static async findWithTitle(\n    titre: string,\n    options: OptionsOeuvre,\n    form: FormManager<any, any>\n  ) {\n    this.form = form;\n    // On cherche les candidats \u00E0 partir du titre\n    let oeuvres: OeuvreType[] = [];\n    \n    // Recherche d'un film\n    if ( options.type === undefined || options.type === 'film' || options.type === 's\u00E9rie') {\n      oeuvres = await TMDB.getSimpleInformations(titre, options);\n    }\n\n    if (oeuvres.length === 0) {\n      // <= pas un film ou aucun film trouv\u00E9 sur TMDB\n      // => On cherche avec Wikip\u00E9dia\n      oeuvres = await new WikiPedia('fr').findOeuvreFromTitle(titre, options);\n      console.log(\"Oeuvres remont\u00E9es pas wikip\u00E9dia:\", oeuvres);\n    }\n    \n\n    if (oeuvres.length === 0){\n      this.flash('Aucune \u0153uvre trouv\u00E9e avec ce titre\u2026', 'error');\n      return undefined;\n    }\n\n    // Premi\u00E8re tentative de filtrage par les options\n    if ( oeuvres.length > 5 ) {\n      const oeuvresFiltred = this.filterPerOptions(oeuvres, options);\n      // On ne prend les oeuvres filtr\u00E9es que s'il y en a\n      if (oeuvresFiltred.length > 0) { oeuvres = oeuvresFiltred; }\n    }\n\n    if (oeuvres.length === 1){ this.peupleForm(oeuvres[0]); return; }\n    \n    // Si elles sont toujours trop nombreuses, on proc\u00E8de \u00E0 un\n    // premier choix avant d'aller chercher les informations\n    // compl\u00E8te\n    if (oeuvres.length > 5) {\n      oeuvres = await this.chooseFiveMax(oeuvres);\n      if (oeuvres.length === 1) { this.peupleForm(oeuvres[0]); return; }\n    }\n\n    // On peut r\u00E9cup\u00E9rer les informations compl\u00E8tes des oeuvres\n    // restantes (pour le moment seulement si ce sont des films)\n    // Pour une \u0153uvre r\u00E9cup\u00E9r\u00E9e sur Wikip\u00E9dia, tout a d\u00E9j\u00E0 \u00E9t\u00E9\n    // r\u00E9cup\u00E9r\u00E9.\n    if (options.type === undefined || options.type === 'film') {\n      oeuvres = await TMDB.getFullInformations(oeuvres);\n    } \n    \n    // Et enfin, on peut choisir parmi les oeuvres restantes\n    this.choose(oeuvres, 0);\n    \n  }\n  /**\n   * Re\u00E7oit une liste d'oeuvres et les affiche en boucle pour en \n   * choisir une.\n   * \n   * @param oeuvres Les oeuvres parmi lesquelles choisir\n   * @param ioeuvre Le \"pointeur\" de liste qui permet de savoir quelle oeuvre affich\u00E9e\n   */\n  public static choose(oeuvres: OeuvreType[], ioeuvre: number) {\n    if (ioeuvre >= oeuvres.length - 1) {\n      this.flash('On reprend\u2026', 'notice');\n      ioeuvre = 0;\n    }\n    const dataOeuvre = oeuvres[ioeuvre];\n    ++ ioeuvre;\n    this.peupleForm(dataOeuvre);\n    const map = new Map();\n    map.set('o', ['Prendre cette \u0153uvre', this.onChoose.bind(this)]);\n    map.set('n', ['Suivante', this.choose.bind(this, oeuvres, ioeuvre)]);\n    map.set('q', ['Finir', this.onCancel.bind(this)]);\n    this.form.panel.flashAction(\"Est-ce cette \u0153uvre-l\u00E0 ?\", map);\n  }\n\n  /**\n   * Permet de choisir, parmi un trop grand nombre d'\u0153uvres, les cinq dont on va\n   * relever toutes les informations pour pouvoir choisir la bonne.\n   * \n   * @param oeuvres Les oeuvres initiales (20 maximum, avec TMDB)\n   * @returns \n   */\n  private static async chooseFiveMax(oeuvres: OeuvreType[]): Promise<OeuvreType[]>{\n    const result = {\n      oeuvres: oeuvres, // Les oeuvres, mais qu'on shiftera\n      kept: [], // Les oeuvres qui seront gard\u00E9es\n      choosed: [], // C'est une liste par commodit\u00E9, mais il n'y aura que l'oeuvre choisie (if any) \n      max: 5 // Le nombre maximum d'\u0153uvres \u00E0 conserver\n    };\n    return new Promise((resolve, reject) => {\n      Object.assign(result, {resolve: resolve, reject: reject});\n      this.chooseMaxIn(result);\n    });\n  }\n\n  private static chooseMaxIn(result: {[x: string]: any}){\n    const oeuvre = result.oeuvres.shift(); // la premi\u00E8re car c'est la plus probable\n    if (oeuvre && result.kept.length < result.max && result.choosed.length === 0) {\n      // Tans qu'il reste des oeuvres \u00E0 voir, on les pr\u00E9sente\n      this.peupleForm(oeuvre);\n      const map = new Map();\n      map.set('o', ['Mettre de c\u00F4t\u00E9', () => {result.kept.push(oeuvre); this.chooseMaxIn(result);}]);\n      map.set('n', ['Rejeter', () => this.chooseMaxIn(result)]);\n      map.set('y', ['C\u2019est celle l\u00E0\u00A0!', () => {result.choosed = [oeuvre]; result.kept = []; this.chooseMaxIn(result);}]);\n      map.set('q', ['Finir', () => {result.max = 0; this.chooseMaxIn(result);}]);\n      this.form.panel.flashAction(\"Que dois-je faire de cette \u0153uvre\u00A0?\", map);\n    } else {\n      // On a pass\u00E9 en revue toutes les oeuvres, ou on en a choisie une en particulier,\n      // ou on doit arr\u00EAter => on retourne celles qui ont \u00E9t\u00E9 gard\u00E9e.\n      result.resolve(result.kept.push(...result.choosed));\n    }\n    \n  }\n\n  // Juste pour avoir un point de sortie\n  public static onCancel(ev: Event){ev && stopEvent(ev);}\n\n  public static onChoose(ev: Event){\n\n    ev && stopEvent(ev);\n  }\n\n  private static flash(message: string, type: FlashMessageType){\n    this.form.panel.flash(message, type);\n  }\n\n  // Affiche les donn\u00E9es de l'\u0153uvre dans le formulaire, pour pouvoir \n  // les garder.\n  public static peupleForm(oeuvre: OeuvreType) {\n    console.log(\"Peupler le formulaire avec : \", oeuvre);\n    this.form.setValueOf('titre_affiche', oeuvre.titre);\n    this.form.setValueOf('titre_original', oeuvre.titre_original);\n    oeuvre.auteurs && this.form.setValueOf('auteurs', oeuvre.auteurs);\n    this.form.setValueOf('resume', oeuvre.resume);\n    oeuvre.annee && this.form.setValueOf('annee', oeuvre.annee);\n    const infos = { \n      langue: oeuvre.langue || undefined, \n      pays: oeuvre.pays || undefined, \n      editeur: oeuvre.editeur || undefined,\n      isbn: oeuvre.isbn || undefined,\n      director: oeuvre.director || undefined,\n    };\n    let infosStr = JSON.stringify(infos);\n    if (infosStr === '{}') { infosStr = ''; }\n    this.form.setValueOf('notes', infosStr);\n  }\n\n\n  /**\n   * @api\n   * \n   * M\u00E9thode permettant de filtrer les oeuvres par ann\u00E9es\n   */\n  public static filterPerOptions(oeuvres: OeuvreType[], options: OptionsOeuvre): OeuvreType[] {\n    oeuvres = this.filterPerYear(oeuvres, options);\n    oeuvres = this.filterPerCountry(oeuvres, options);\n    oeuvres = this.filterPerLanguage(oeuvres, options);\n    return oeuvres;\n  }\n\n  // Filtrage par ann\u00E9e\n  private static filterPerYear(oeuvres: OeuvreType[], options: OptionsOeuvre) {\n    options.annee = Number(options.annee);\n    // On peut en discriminer par leurs infos. Par exemple si une\n    // ann\u00E9e est fournie, on prend le film qui correspondrait \u00E0 \n    // cette date ou les deux qui seraient les plus proches.\n    var onlyOneMatches = false; // mis \u00E0 true si un film correspond exactement \u00E0 la date\n    oeuvres = oeuvres.map((result: any) => {\n      if (onlyOneMatches) { return result; /* on peut faire vite*/ }\n      if (options.annee && result.annee === options.annee) {\n        onlyOneMatches = true;\n      }\n      return result;\n    }).filter((result: any) => {\n      if (onlyOneMatches) {\n        return result.annee === options.annee;\n      } else {\n        // On ne garde que les oeuvres dans une tranche de 10 ans\n        return result.annee < (options.annee as number) + 5 && result.annee > (options.annee as number) - 5;\n      }\n    });\n    return oeuvres;\n  }\n  private static filterPerCountry(oeuvres: OeuvreType[], options: OptionsOeuvre){\n    if (undefined === options.pays) { return oeuvres; }\n    return oeuvres.filter((oeuvre: OeuvreType) => oeuvre.pays === options.pays);\n  }\n  private static filterPerLanguage(oeuvres: OeuvreType[], options: OptionsOeuvre): OeuvreType[] {\n    if (undefined === options.langue) { return oeuvres; }\n    return oeuvres.filter((oeuvre: OeuvreType) => oeuvre.langue === options.langue);\n  }\n\n} // OeuvrePicker\n\n/**\n * \n * \n * \n * ==================== TMDB ======================\n * \n * \n * \n */\nexport class TMDB {\n\n  /**\n   * @api\n   * R\u00E9cup\u00E8re et retourne les informations des films de titre +titre+\n   * \n   * @param titre Le titre du film dont il faut avoir les informations. Plus tard, on verra si on peut avoir plusieurs films d'un coup.\n   * @returns \n   */\n  public static async getSimpleInformations(\n    titre: string,\n    options: OptionsOeuvre \n  ): Promise<OeuvreType[]> {\n    let searchResults = await this.searchMovie(titre);\n    // On pr\u00E9pare les donn\u00E9es (surtout dans le cas d'un filtrage\n    // n\u00E9cessaire)\n    searchResults = searchResults.map((result: any) => {\n      return {\n        id: result.id,\n        annee: Number(result.release_date.substring(0,4)),\n        langue: result.original_language,\n        titre_original: result.original_title,\n        titre: result.title,\n        resume: result.overview,\n      };\n    });\n    console.log(\"Premiers r\u00E9sultats pr\u00E9par\u00E9s (%i)\", searchResults.length, structuredClone(searchResults));\n\n    return searchResults;\n }\n\n  /**\n   * Retourne les informations compl\u00E8tes pour les films +oeuvres+\n   * \n   */\n  public static async getFullInformations(oeuvres: OeuvreType[]): Promise<OeuvreType[]> {\n    return await Promise.all(oeuvres.map(async (oeuvre: OeuvreType) => this.getAllInfos(oeuvre)));\n  }\n\n  // @return Toutes les informations sur le film +dOeuvre+\n  private static async getAllInfos(dOeuvre: OeuvreType): Promise<OeuvreType> {\n    const movieId = dOeuvre.id;\n    const details = await this.getMovieDetails(movieId);\n    // console.log(\"details\", details);\n    const credits = await this.getMovieCredits(movieId);\n    // console.log(\"credits\", credits);\n    return Object.assign(dOeuvre, {\n      idmbId: details.imdb_id,\n      pays: details.origin_country.join(', '),\n      director: credits.director, \n      auteurs: credits.auteurs \n    });\n  }\n\n\n  private static _TMDBSecrets: { [x: string]: string };\n\n  private static get TMDB_READING_API_TOKEN() {\n    return this._TMDBSecrets.reading_api_token;\n  }\n  private static async getTMDBSecrets() {\n    return RpcOeuvre.ask('tmdb-secrets')\n      .then(retour => {\n        // console.log(\"Retour des secrets : \", retour);\n        this._TMDBSecrets = retour;\n        return retour;\n      })\n      .catch(error => {\n        console.error(\"Une erreur est survenue\", error);\n      });\n  }\n\n  // Recherche par titre\n  private static async searchMovie(title: string) {\n    // Si les codes n'ont pas encore \u00E9t\u00E9 r\u00E9cup\u00E9r\u00E9s, il faut le faire\n    if (undefined === this._TMDBSecrets) { await this.getTMDBSecrets(); }\n    const url = `https://api.themoviedb.org/3/search/movie?query=${encodeURIComponent(title)}`;\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.TMDB_READING_API_TOKEN}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    return data.results; // tableau de films\n  }\n\n  // Informations d\u00E9taill\u00E9es d'un film par ID\n  private static async getMovieDetails(movieId: string) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}`;\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.TMDB_READING_API_TOKEN}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return await response.json();\n  }\n\n\n  // Informations techniques (cast & crew)\n  private static async getMovieCredits(movieId: string) {\n    const url = `https://api.themoviedb.org/3/movie/${movieId}/credits`;\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.TMDB_READING_API_TOKEN}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n\n    console.log(\"Information cr\u00E9dits compl\u00E8tes\", data);\n\n    // Filtrer les r\u00F4les qui t'int\u00E9ressent\n    type CreditsType = {directors: string[], writers: string[], director: string | undefined, auteurs: string | undefined}\n    const credits: CreditsType = {\n      directors: [],\n      writers: [],\n      director: undefined,\n      auteurs: undefined\n    };\n    data.crew.forEach((person: {job: string, name: string, [x: string]: any}) => {\n      switch(person.job){\n        case 'Director':\n          credits.directors.push(person.name + MARK_UNKNOWN_GENRE); break;\n        case 'Writer':\n        case 'Co-Writer':\n        case 'Author':\n        case 'Adaptation':\n        case 'Screenplay':\n        case 'Story':\n        case 'Screenstory':\n        case 'Book':\n        case 'Novel':\n          credits.writers.push(person.name+MARK_UNKNOWN_GENRE); break;\n      }\n    });\n\n    const allauteurs = [];\n    allauteurs.push(...credits.directors);\n    allauteurs.push(...credits.writers);\n\n    credits.director = credits.directors.join(', ');\n    credits.auteurs = allauteurs.join(', '); \n    return credits;\n  }\n} // TMDB\n\nconst MARK_UNKNOWN_GENRE = '[HF?]';\n\n/**\n * \n * \n * =============== WIKIPEDIA ==================\n * \n *\n */\nclass WikiPedia {\n  private baseUrl: string;\n  private wikiApiUrl: string;\n\n  constructor(lang: string = 'fr') {\n    this.baseUrl = 'https://fr.wikipedia.org/api/rest_v1/page/summary/';\n    this.wikiApiUrl = `https://${lang}.wikipedia.org/w/api.php`;\n  }\n\n  /**\n   * @api\n   * \n   * Trouve sur Wikip\u00E9dia toutes les oeuvres correspondant au titre +titre+ et\n   * en reetourne les informations dans un format standard (OeuvreType).\n   * \n   * @param titre Le titre donn\u00E9\n   * @param options Les options pour filtrer (peut-\u00EAtre)\n   * @returns La liste des oeuvres potentielles\n   */\n  async findOeuvreFromTitle(titre: string, options: OptionsOeuvre): Promise<OeuvreType[]> {\n    try {\n      // \u00C9tape 1: Rechercher la page\n      let searchResults = await this.searchPage(titre);\n      // console.log(\"Premiers r\u00E9sultats\", searchResults);\n      if (!searchResults || searchResults.length === 0) { return []; }\n\n      // On exclut les titres qui ne contiennent pas le titre fourni\n      searchResults = searchResults.filter((data: { [x: string]: any }) => {\n        return data.title.match(titre);\n      });\n      // console.log(\"Pages filtr\u00E9es (doivent contenir le titre)\", searchResults);\n\n      // On cherche particuli\u00E8rement un titre contenant le type\n      const resultsProv = searchResults.filter((data: { [x: string]: any }) => {\n        return data.title.match(options.type);\n      });\n      if (resultsProv.length > 0) {\n        searchResults = resultsProv;\n        // console.log(\"Filtrage plus pr\u00E9cis par le type\", searchResults);\n      }\n\n      // R\u00E9cup\u00E9ration des informations de base (bof\u2026)\n      searchResults = await this.getPageSummary(searchResults);\n      // console.log(\"Apr\u00E8s summary\", searchResults);\n\n      // R\u00E9cup\u00E9ration du contenu d\u00E9taill\u00E9 des pages\n      searchResults = await this.getPageContent(searchResults);\n      // console.log(\"Apr\u00E8s r\u00E9cup\u00E9ration du contenu des pages\", searchResults);\n\n      // R\u00E9cup\u00E9ration des infobox si disponible\n      searchResults = await this.getInfobox(searchResults);\n      // console.log(\"Apr\u00E8s r\u00E9cup\u00E9ration des infobox\", searchResults);\n\n      searchResults = this.structureInfosFromSources(searchResults);\n      // console.log(\"Infos apr\u00E8s restructuration\", searchResults);\n\n      // On ne retourne que les informations int\u00E9ressantes\n      return searchResults.map((result: { [x: string]: any }) => {\n        return {\n          titre: result.titre,\n          titre_original: result.titre_original || result.titre,\n          titre_francais: result.titre_francais,\n          auteur: result.auteur,\n          annee: result.annee,\n          isbn: result.isbn,\n          pays: result.pays,\n          langue: result.langue,\n          type: options.type,\n          resume: result.resume\n        };\n      });\n    } catch (error) {\n      console.error('Erreur lors de la r\u00E9cup\u00E9ration des informations:', error);\n      throw error;\n    }\n  }\n\n  // Rechercher jusqu'\u00E0 10 pages Wikipedia par l'API correspondant au titre\n  async searchPage(titre: string) {\n    const searchUrl = `${this.wikiApiUrl}?action=query&format=json&list=search&srsearch=${encodeURIComponent(titre)}&srlimit=10&origin=*`;\n    const response = await fetch(searchUrl);\n    const data = await response.json();\n    return data.query?.search || [];\n  }\n\n    // R\u00E9cup\u00E9rer le r\u00E9sum\u00E9 de la page\n  async getPageSummary(searchResults: any[]) {\n    return await Promise.all(\n      searchResults.map(async (result: { [x: string]: any }) => {\n        const summaryUrl = `${this.baseUrl}${encodeURIComponent(result.title)}`;\n        const response = await fetch(summaryUrl);\n        if (response.ok) { Object.assign(result, {summary: response.json()}); }\n        return result;\n      })\n    );\n  }\n\n  // R\u00E9cup\u00E9rer le contenu complet de la page\n  async getPageContent(searchResults: any[]) {\n    return Promise.all(\n      searchResults.map(async (result: { [x: string]: any }) => {\n        const contentUrl = `${this.wikiApiUrl}?action=query&format=json&titles=${encodeURIComponent(result.title)}&prop=extracts&exintro=false&explaintext=true&origin=*`;\n        const response = await fetch(contentUrl);\n        const data = await response.json();\n        const pages = data.query.pages;\n        const pageId = Object.keys(pages)[0];\n        Object.assign(result, {pageContent: pages[pageId]?.extract || ''});\n        return result;\n      })\n    );\n  }\n\n  // R\u00E9cup\u00E9rer l'infobox de la page\n  async getInfobox(searchResults: any[]) {\n    return Promise.all(\n      searchResults.map(async (result: {[x: string]: any}) => {\n        const infoboxUrl = `${this.wikiApiUrl}?action=query&format=json&titles=${encodeURIComponent(result.title)}&prop=revisions&rvprop=content&origin=*`;\n        const response = await fetch(infoboxUrl);\n        const data = await response.json();\n        const pages = data.query.pages;\n        const pageId = Object.keys(pages)[0];\n        const content = pages[pageId]?.revisions?.[0]?.['*'] || '';\n        const infobox = this.parseInfobox(content);\n        Object.assign(result, {\n          infoBox: infobox,\n          annee: infobox.annee,\n          auteur: infobox.auteur,\n          isbn: infobox.isbn,\n          pays: infobox.pays,\n        });\n        return result;\n      })\n    );\n\n }\n\n  // Parser l'infobox depuis le wikicode\n  parseInfobox(wikicode: string) {\n    const infobox: {[x: string]: any} = {};\n\n    // console.log(\"Recherche d'infos dans le wikicode:\", wikicode);\n\n    // Rechercher les patterns d'infobox communes pour les livres\n    const patterns = {\n      titre: /\\|\\s*titre\\s*=\\s*(.+)/i,\n      titre_original: /\\|\\s*titre[_\\s]*orig(?:inal)?\\s*=\\s*(.+)/i,\n      titre_francais: /\\|\\s*titre[_\\s]*fran\u00E7ais?\\s*=\\s*(.+)/i,\n      auteur: /\\|\\s*auteurs?\\s*=\\s*(.+)/i,\n      annee: /\\|\\s*(?:ann\u00E9e|date)[_\\s]*(?:publication|parution)?\\s*=\\s*(.+)/i,\n      pays: /\\|\\s*pays\\s*=\\s*(.+)/i,\n      langue: /\\|\\s*langue[_\\s]*originale?\\s*=\\s*(.+)/i,\n      isbn: /\\|\\s*isbn\\s*=\\s*(.+)/i,\n      editeur: /\\|\\s*\u00E9diteurs?\\s*=\\s*(.+)/i\n    };\n\n    for (const [key, pattern] of Object.entries(patterns)) {\n      const match = wikicode.match(pattern);\n      if (match) {\n        // Nettoyer la valeur extraite\n        let value = match[1].trim();\n        value = value.replace(/\\[\\[([^\\]|]+)(\\|[^\\]]+)?\\]\\]/g, '$1'); // Liens wiki\n        value = value.replace(/{{[^}]+}}/g, ''); // Templates\n        value = value.replace(/<[^>]+>/g, ''); // Balises HTML\n        infobox[key] = value.trim();\n      }\n    }\n    // Quelques rectifications\n    if (infobox.annee) { infobox.annee = Number(infobox.annee.substring(0,4));}\n    if (infobox.isbn) { infobox.isbn = infobox.isbn.split(' ')[0];}\n\n    return infobox;\n  }\n\n  structureInfosFromSources(searchResults: any[]) {\n    return searchResults.map((result: { [x: string]: any }) =>\n      this.extractBookInfo(result.summary, result.pageContent, result.infoBox, result.title)\n    );\n  }\n\n  // Extraire les informations du livre depuis toutes les sources\n  extractBookInfo(summary: any, content: string, infobox: {[x: string]: any}, pageTitle: string) {\n\n    const bookInfo: { [x: string]: any } = {\n      titre: null,\n      titre_original: null,\n      titre_francais: null,\n      auteurs: null,\n      annee: null,\n      pays: null,\n      langue: null,\n      isbn: null,\n      editeur: null,\n      resume: null\n    };\n\n    try {\n      // Titre\n      bookInfo.titre = infobox.titre || pageTitle;\n\n      // Titre original\n      bookInfo.titre_original = infobox.titre_original || this.extractFromText(content, /titre original[:\\s]+([^\\n.]+)/i);\n\n      // Titre fran\u00E7ais\n      bookInfo.titre_francais = infobox.titre_francais || this.extractFromText(content, /titre fran\u00E7ais[:\\s]+([^\\n.]+)/i);\n\n      // Auteurs\n      bookInfo.auteurs = infobox.auteur || this.extractFromText(content, /(?:\u00E9crit par|auteur[:\\s]+|de\\s+)([A-Z][^\\n.]+)/);\n\n      const getAnnee = () => {\n        const anneeMatch = this.extractFromText(content, /(?:publi\u00E9 en|paru en|\u00E9crit en)\\s+(\\d{4})/i);\n        if (anneeMatch) {\n          return Number(anneeMatch.match(/\\d{4}/)?.[0]);\n        }\n      };\n      // Ann\u00E9e\n      bookInfo.annee = infobox.annee || getAnnee();\n\n      // Pays\n      bookInfo.pays = infobox.pays || this.extractFromText(content, /(?:pays d'origine|publi\u00E9 en|originaire de)\\s+([A-Z][^\\n.,]+)/i);\n\n      // Langue originale\n      bookInfo.langue = infobox.langue || this.extractFromText(content, /langue originale[:\\s]+([^\\n.,]+)/i);\n\n      // ISBN\n      const isbnMatch = infobox.isbn || this.extractFromText(content, /ISBN[:\\s]+([\\d-]+)/i);\n      bookInfo.isbn = isbnMatch;\n\n      // \u00C9diteur\n      bookInfo.editeur = infobox.editeur || this.extractFromText(content, /(?:\u00E9ditions|\u00E9diteur)[:\\s]+([^\\n.,]+)/i);\n\n      // R\u00E9sum\u00E9 (utiliser l'extrait de Wikipedia)\n      bookInfo.resume = summary.extract || content.substring(0, 500) + '[\u2026]';\n\n      // Nettoyer les valeurs nulles ou vides\n      Object.keys(bookInfo).forEach(key => {\n        if (!bookInfo[key] || (typeof bookInfo[key] === 'string' && bookInfo[key].trim() === '')) {\n          bookInfo[key] = null;\n        }\n      });\n\n    } catch(erreur) {\n      console.error(\"Erreur lors de l'extraction des donn\u00E9es : \", erreur);\n      bookInfo.error = (erreur as Error).message;\n    }\n\n    return bookInfo;\n  }\n\n    // Fonction utilitaire pour extraire du texte avec regex\n    extractFromText(text: string, pattern: RegExp) {\n        const match = text.match(pattern);\n        return match ? match[1].trim() : null;\n    }\n}\n", "import { StringNormalizer } from \"../../bothside/StringUtils\";\nimport { AnyItemType, DBOeuvreType, OeuvreType } from \"../../bothside/types\";\nimport { ComplexRpc } from \"../services/ComplexRpc\";\nimport { stopEvent } from \"../services/DomUtils\";\nimport { FormManager, FormProperty } from \"../services/FormManager\";\nimport { OeuvrePicker, OptionsOeuvre } from \"../services/OeuvreFinder\";\nimport { Oeuvre } from \"./Oeuvre\";\n\nexport class OeuvreForm extends FormManager<OeuvreType, DBOeuvreType> {\n  prefix = 'oeuvre';\n  formId = 'oeuvre-form';\n  properties: FormProperty[] = [\n    {propName: 'titre_affiche', type: String, required: true, fieldType: 'text', onChange: this.onChangeTitreAffiched.bind(this)},\n    {propName: 'id', type: String, required: true, fieldType: 'text'},\n    {propName: 'titre_original', type: String, required: true, fieldType: 'text', onChange: this.onChangeTitreOriginal.bind(this)},\n    {propName: 'titre_francais', type: String, required: false, fieldType: 'text'},\n    {propName: 'auteurs', type: String, required: true, fieldType: 'text', onChange: this.onChangeAuteurs.bind(this)},\n    {propName: 'type', type: String, required: true, fieldType: 'select', values: [['film', 'Film'], ['s\u00E9rie', 'S\u00E9rie'], ['roman', 'Roman'], ['pi\u00E8ce', 'Pi\u00E8ce'], ['livre', 'Livre'], ['bd', 'BD']]},\n    {propName: 'annee', type: String, required: true, fieldType: 'text'},\n    {propName: 'resume', type: String, required: false, fieldType: 'textarea'},\n    {propName: 'notes', type: String, required: false, fieldType: 'textarea'}\n  ];\n  // Table des raccourcis 'one key' propre au formulaire \n  tableKeys = {\n    i: {lab: 'Infos externes sur l\u2019\u0153uvre', fn: this.getOeuvreExternInfo.bind(this)}\n  };\n\n  static readonly REG_AUTEUR = /([^ ]+) ([^\\[])\\[(H|F)\\]/;\n\n  afterEdit(): void {\n    const id = this.getValueOf('id');\n    const isNew = id === '';\n    this.setIdLock(!isNew);\n    this.panel.context = isNew ? 'create-oeuvre' : 'edit-oeuvre';\n  }\n\n  async checkEditedItem(): Promise<string | undefined> {\n    const item = this.editedItem;\n    const changeset = item.changeset;\n    const errors: string[] = [];\n    let errs:string | undefined; // Pour mettre les erreurs provisoires\n\n    // En cas de nouvelle \u0153uvre\n    if (changeset.isNew) {\n      // Pas mal de choses ont d\u00E9j\u00E0 \u00E9t\u00E9 v\u00E9rifi\u00E9es, et notamment le \n      // fait que les titres n'existent pas.\n    }\n    const dbData: DBOeuvreType = item.original as DBOeuvreType;\n\n    if (changeset.id !== undefined) {\n      if (changeset.id === '' || !changeset.id) {\n        errors.push('Il faut absolument que cet item ait un identifiant.');\n      }\n    }\n\n    if (changeset.titre_origin !== undefined) {\n      if ((changeset.titre_original as string).trim().length === 0) {\n        errors.push('Il faut fournir le titre de l\u2019\u0153uvre original.');\n      }\n    }\n\n    if (changeset.auteurs !== undefined) {\n      if (errs = this.checkAuteurs(changeset.auteurs)) {\n        errors.push('erreurs trouv\u00E9s sur les auteurs : ' + errs);\n      }\n    }\n\n    // S'il y a des erreurs\n    if (errors.length) {\n      console.error(\"Donn\u00E9es invalides\", errors);\n      return errors.join(', ').toLowerCase();\n    }\n  }\n\n  /**\n   * V\u00E9rification des auteurs. Pour le moment, on se contente de voir si\n   * leur genre est bien d\u00E9fini.\n   * \n   * @param auteurs String contenant tous les auteurs d\u00E9finis\n   * @returns true/false\n   */\n  checkAuteurs(auteurs: string): undefined | string {\n    let auts: any = auteurs.trim();\n    if ( auts.length === 0) {\n      return 'Il faut imp\u00E9rativement fournir les autrices et auteurs';\n    }\n    auts = auts.split(',').map((a: string) => a.trim());\n    const errs: string[] = [];\n    const genderErrs = this.checkAuteursHaveGender(auts);\n    genderErrs && errs.push(genderErrs);\n    if ( errs.length ) { return errs.join(', ');}\n  }\n  \n  /**\n   * V\u00E9rifie si les auteurs sont bien format\u00E9s (sexe au bout)\n   * \n   * @param auteurs Liste des auteurs de l'\u0153uvre\n   * @returns Liste des erreurs trouv\u00E9es (liste vide si aucune)\n   */\n  checkAuteursHaveGender(auteurs: string[]): string | undefined {\n    const errs = auteurs.map((aut: string) => {\n      if ( null === aut.match(/\\[(H|F)\\]$/) ){\n        return aut;\n      } else {\n        return null;\n      }\n    })\n    .filter((e: string | null) => e !== null);\n\n    if (errs.length) {\n      return `Il faut pr\u00E9ciser le sexe de ${errs.join(', ')} (en mettant \"[H]\" ou \"[F]\" \u00E0 la fin)`;\n    }\n  }\n\n  observeForm(): void {\n    const btnTMDB = this.obj.querySelector('.btn-get-infos');\n    btnTMDB?.addEventListener('click', this.getOeuvreExternInfo.bind(this));\n  }\n\n  async getOeuvreExternInfo(ev: Event){\n    const titre = ((this.getValueOf('titre_original') || this.getValueOf('titre_affiche')) as string).trim();\n    if (titre === '') {\n      this.flash('Il faut indiquer le titre de l\u2019\u0153uvre\u00A0!', 'error');\n    } else {\n      this.flash('Je r\u00E9cup\u00E8re les informations du film ' + titre + '\u2026');\n      const options = {\n        langue: undefined, \n        annee: this.getValueOf('annee'),\n        type: this.getValueOf('type'),\n      } as OptionsOeuvre;\n      if ( this.getValueOf('annee') !== '') { Object.assign(options, {annee: Number(this.getValueOf('annee'))});}\n      const infos = await OeuvrePicker.findWithTitle(titre, options, this);\n    }\n    ev && stopEvent(ev);\n  }\n \n  onChangeAuteurs(ev: Event | undefined = undefined) {\n    let auteurs: string | string[] = (this.getValueOf('auteurs') as string).trim();\n    if ( auteurs !== '') {\n      auteurs = auteurs.split(',').map((au: string) => au.trim());\n      const errs = this.checkAuteursHaveGender(auteurs);\n      if (errs) { this.flash(errs + '.', 'error'); }\n    }\n\n    return ev && stopEvent(ev);\n  }\n\n  onChangeTitreAffiched(ev: Event | undefined = undefined){\n    const noTitreOriginal = this.getValueOf('titre_original') === '';\n    const titaff = this.getValueOf('titre_affiche') as string;\n    if ( this.editedItem.changeset.isNew) {\n     if (Oeuvre.doOeuvresExist([titaff]).known.length) {\n        this.flash('Ce titre existe d\u00E9j\u00E0. Si vous voulez vraiment le conserver, ajoutez un indice.', 'error');\n        this.setValueOf('titre_affiche', '');\n        return ev && stopEvent(ev);\n      }\n      if (noTitreOriginal) {\n        this.setTitreOriginalFromTitreAffiched();\n        // On demande \u00E0 l'utilisateur s'il veut rechercher les infos du \n        // film sur TMDB\n        console.log(\"Il faut que je demande s'il faut rechercher les information du film sur TMDB\");\n      } else {\n        this.flash(\"Le titre original est d\u00E9fini, je ne le touche pas.\");\n      }\n    }\n  }\n\n  private flash(message: string, type: any = 'notice'){\n    Oeuvre.panel.flash(message, type);\n  }\n\n  private REG_TITRE_AFF = /^(Les|Le|La|Une|Un|The|A) (.+)$/;\n  setTitreOriginalFromTitreAffiched() {\n    // On construit le titre original en retirant l'\u00E9ventuel article\n    let titreOriginal: any = this.getValueOf('titre_affiche');\n    if ( titreOriginal.match(this.REG_TITRE_AFF)) {\n      titreOriginal = titreOriginal.replace(this.REG_TITRE_AFF, (tout: string, article: string, reste: string) => {\n        return `${reste} (${article})`;\n      });\n    }\n    this.setValueOf('titre_original', titreOriginal);\n    this.onChangeTitreOriginal();\n  }\n\n  /**\n   * M\u00E9thode appel\u00E9e quand on modifie le titre original (normalement,\n   * \u00E7a n'arrive qu'en cas de nouvelle \u0153uvre).\n   * \n   * Noter qu'elle est appel\u00E9e automatiquement quand le titre\n   * original n'\u00E9tait pas d\u00E9fini et qu'on a d\u00E9fini le titre d'affi-\n   * chage de l'\u0153uvre.\n   * \n   * C'est aussi ici qu'on met un ID automatique s'il n'est pas\n   * d\u00E9fini.\n   * \n   */\n  onChangeTitreOriginal(ev: Event | undefined = undefined){\n    const idNotDefined = (this.getValueOf('id') as string).trim() === '';\n    const titorig = this.getValueOf('titre_original') as string;\n    // Par exemple quand remise \u00E0 rien pour recalcul de l'id\n    if (titorig === '') { return ; }\n\n    if (this.editedItem.changeset.isNew) {\n      // Le titre original ne doit pas exister\n      if ( Oeuvre.doOeuvresExist([titorig]).known.length){\n        Oeuvre.panel.flash(\"Ce titre existe d\u00E9j\u00E0. Si c'est vraiment une autre \u0153uvre, ajoutez-lui un indice\", 'error');\n        // TODO Ajouter une touche \"v\" pour le \"voir\" (ce sera une touche provisoire ajout\u00E9e \u00E0 la table des touches du panneau)\n        this.setValueOf('titre_original', '');\n        return;\n      }\n      if ( idNotDefined) {\n        // <= L'identifiant de l'\u0153uvre n'est pas encore d\u00E9finie\n        // => On le cherche de fa\u00E7on automatique\n        this.setValueOf('id', this.idFromTitre(titorig));\n      }\n    }\n    ev && stopEvent(ev);\n  }\n\n  /**\n   * Compose un ID unique en fonction du titre original de l'\u0153uvre\n   */\n  idFromTitre(titre: string): string {\n    let proposId: string = \"\";\n    const mots = titre.split(' ').map(m => StringNormalizer.rationalize(m));\n    const nbMots = mots.length;\n    if ( nbMots >= 3) {\n      const nbLettresFin =  nbMots === 3 ? 2 : 1; \n      proposId = mots.map((m: string, i: number) => {\n        const isLastMot = i === nbMots - 1;\n        const nbLettres = isLastMot ? nbLettresFin : 1;\n        return m.substring(0,nbLettres).toUpperCase();\n    }).join('');\n      proposId = proposId.substring(0, 5); // pas plus de 5 lettres\n    } else {\n      proposId = titre.substring(0, 5).toUpperCase();\n    }\n    // Si l'ann\u00E9e est d\u00E9finie, on l'ajoute\n    let annee;\n    if ( annee = this.getValueOf('annee')){\n      proposId += String(annee);\n    } else {\n      this.flash('Quand l\u2019ann\u00E9e est pr\u00E9cis\u00E9e, elle est ajout\u00E9e \u00E0 l\u2019ID');\n    }\n    // Il doit \u00EAtre unique\n    var iVar = 1;\n    var idTested = String(proposId);\n    while(Oeuvre.doIdExist(idTested)) { idTested = `${proposId}{++iVar}`; }\n    return proposId;\n  }\n\n  /**\n   * ENREGISTREMENT DE L'\u0152UVRE\n   * --------------------------\n   * \n   * @param item L'oeuvre \u00E0 enregistrer\n   * @returns True si l'enregistrement a pu se faire correctement.\n   */\n  async onSaveEditedItem(data2save: DBOeuvreType): Promise<boolean> {\n    // console.log(\"Donn\u00E9es oeuvre \u00E0 sauvegarder\", data2save);\n    const itemSaver = new ComplexRpc({\n      call: Oeuvre.saveItem.bind(Oeuvre, data2save) \n    });\n    const res = await itemSaver.run() as {ok: boolean, errors: any, item: DBOeuvreType, itemPrepared: OeuvreType};\n    // console.log(\"Res apr\u00E8s attente de sauvegarde de l'oeuvre\", res);\n    if (res.ok) {\n      Oeuvre.panel.flash(\"\u0152uvre enregistr\u00E9e avec succ\u00E8s.\", 'notice');\n      let item: AnyItemType, nextItem: AnyItemType | undefined;\n      [item, nextItem] = Oeuvre.accessTable.upsert(res.itemPrepared);\n      if (nextItem /* seulement en cas de cr\u00E9ation d'un nouvel \u00E9l\u00E9ment */) {\n        Oeuvre.panel.insertInDom(item, nextItem);\n      } else {\n        Oeuvre.panel.updateInDom(item);\n      }\n    } else {\n      console.error(\"ERREUR LORS DE L'ENREGISTREMENT DE L'OEUVRE\", res.errors);\n      Oeuvre.panel.flash('Erreur (enregistrement de l\u2019\u0153uvre (voir la console', 'error');\n    }\n    return true;\n  }\n}", "import { StringNormalizer } from '../../bothside/StringUtils';\nimport { RpcChannel } from '../../bothside/RpcChannel';\nimport { createRpcClient } from '../RpcClient';\nimport { ClientItem } from '../ClientItem';\nimport { PanelClient } from '../PanelClient';\nimport { AccessTable } from '../services/AccessTable';\nimport { OeuvreForm } from './OeuvreForm';\nimport { ComplexRpc } from '../services/ComplexRpc';\nimport { OeuvreType, DBOeuvreType, AnyItemType } from '../../bothside/types';\n\nexport class Oeuvre extends ClientItem<OeuvreType> {\n  readonly type = 'oeuvre';\n  static readonly minName = 'oeuvre';\n  static readonly klass = Oeuvre;\n  static currentItem: Oeuvre;\n  \n  // Constructor and data access\n  constructor(public item: OeuvreType) {\n    super(item);\n  }\n  \n  // Getters pour acc\u00E8s direct aux propri\u00E9t\u00E9s courantes\n  get titre_affiche(): string { return this.item.dbData.titre_affiche; }\n  get titre_original(): string | undefined { return this.item.dbData.titre_original; }\n  get titre_francais(): string | undefined { return this.item.dbData.titre_francais; }\n  get annee(): number | undefined { return this.item.dbData.annee; }\n  get auteurs(): string | undefined { return this.item.dbData.auteurs; }\n  get notes(): string | undefined { return this.item.dbData.notes; }\n  get resume(): string | undefined { return this.item.dbData.resume; }\n\n  static setAccessTableWithItems(items: OeuvreType[]) {\n    this._accessTable = new AccessTable<OeuvreType>(this.panel, items);\n  }\n  public static _accessTable: AccessTable<OeuvreType>;\n\n  /**\n        ==== M\u00C9THODES DE CHECK ===\n   */\n\n  /**\n   * M\u00E9thode qui checke l'existence de l'identifiant\n   */\n  public static doIdExist(id: string): boolean {\n    return this.accessTable.exists(id);\n  }\n  /**\n   * M\u00E9thode qui checke l'existence des oeuvres\n   * \n   * @param oeuvres Liste des oeuvres, d\u00E9sign\u00E9es par leur identifiant ou un de leurs titres\n   * @return Une table avec les cl\u00E9s :known (oeuvres connues) et :unknown (oeuvres inconnues)\n   */\n  public static doOeuvresExist(oeuvres: string[]): {known: string[], unknown: string[]} {\n    const retour: {known: string[], unknown: string[]} = {known: [], unknown: []};\n    oeuvres.forEach(oeuvre => {\n      if (this.accessTable.exists(oeuvre) || this.oeuvreExistsByTitle(oeuvre) ) {\n        retour.known.push(oeuvre);\n      } else {\n        retour.unknown.push(oeuvre);\n      }\n    });\n    return retour;\n  }\n  private static oeuvreExistsByTitle(title: string): boolean {\n    title = StringNormalizer.rationalize(title);\n    return !!this.accessTable.find((item: OeuvreType) => item.cachedData.titresLookUp.includes(title));\n  }\n\n  /**\n   * \n   * M\u00E9thodes pour enregistrer les oeuvres\n   */\n  public static saveItem(item: DBOeuvreType, compRpcId: string) {\n    RpcOeuvre.notify('save-item', {CRId: compRpcId, item: item});\n  }\n\n  public static onSavedItem(params: {CRId: string, ok: boolean, errors: any, item: DBOeuvreType, itemPrepared: OeuvreType}){\n    // console.log(\"[CLIENT OEUVRE] Retour dans le panneau des oeuvres\", params);\n    ComplexRpc.resolveRequest(params.CRId, params);\n  }\n   \n  public static autoCompleteBaliseTerm(triggre: string, ev: Event){\n    return this.panel.flash('Auto compl\u00E9tion seulement pour panneau des entr\u00E9es.', 'notice');\n  }\n\n\n}\n\n\n/**\n * \n * \n * ============== PANNEAU OEUVRES ====================\n * \n * \n * \n */\n\n\nclass OeuvrePanelClass extends PanelClient<OeuvreType> {\n  public get accessTable(){ return Oeuvre.accessTable ; }\n\n  public tableKeys = {\n    C: {lab: 'choisir pour exemple', fn: this.chooseSelectedItemForExemple.bind(this)},\n    E: {lab: 'nouvel exemple pour s\u00E9lection', fn: this.createExempleForSelectedItem.bind(this)},\n  };\n\n  chooseSelectedItemForExemple(confirmed: boolean | undefined) {\n    if (confirmed === true) {\n      // on y va\n      const oeuvreId: string = this.getSelection() as string;\n      RpcOeuvre.notify('oeuvre-for-exemple', {oeuvreId: oeuvreId, oeuvreTitre: this.accessTable.get(oeuvreId).dbData.titre_affiche});\n    } else if (confirmed === false) {\n      this.flash(\"Ok, on renonce.\", 'notice');\n    } else {\n      // On demande confirmation\n      const selected: string | undefined = this.getSelection();\n      if (selected) {\n        // On demande confirmation\n        const boutons: Map<string, any> = new Map();\n        boutons.set('o', ['Oui', this.chooseSelectedItemForExemple.bind(this, true)]);\n        boutons.set('n', ['Renoncer', this.chooseSelectedItemForExemple.bind(this, false)]);\n        this.flashAction(\"Veux-tu choisir cette \u0153uvre pour l'exemple \u00E9dit\u00E9 ?\", boutons);\n      } else {\n        this.flash(\"Il faut s\u00E9lectionner l'\u0153uvre voulue\u00A0!\", 'warn');\n      }\n    }\n\n\n  }\n  createExempleForSelectedItem(){\n    this.flash(\"Je dois cr\u00E9er un exemple pour l'entr\u00E9e courante.\", 'notice');\n  }\n\n  // M\u00E9thode permettant de filtrer la liste des exemples\n  searchMatchingItems(searched: string): OeuvreType[] {\n    const searchLower = StringNormalizer.toLower(searched);\n    return this.filter(Oeuvre.accessTable, (oeuvre: AnyItemType) => {\n      return (oeuvre as OeuvreType).cachedData.titresLookUp.some((titre: string) => {\n        return titre.substring(0, searchLower.length) === searchLower;\n      });\n    }) as OeuvreType[];\n  }\n  protected formateProp(item: OeuvreType, prop: string, value: string | number | boolean): string {\n    switch(prop){\n      case 'titre_francais':\n        const titfr: string | undefined = item.dbData.titre_francais;\n        if (!titfr || titfr === item.dbData.titre_original) { return ''; }\n    }\n    return String(value);\n  }\n}\n\nconst OeuvrePanel = new OeuvrePanelClass({\n  minName: 'oeuvre',\n  titName: '\u0152uvre',\n  klass: Oeuvre,\n  form: new OeuvreForm()\n});\nOeuvrePanel.form.setPanel(OeuvrePanel);\nOeuvre.panel = OeuvrePanel;\n\n\n/**\n * Canal RPC du panneau Oeuvre\n */\nexport const RpcOeuvre:RpcChannel = createRpcClient();\n\nRpcOeuvre.on('activate', () => {\n  if ( OeuvrePanel.isActif ) { return ; }\n  // console.log(\"[CLIENT OEUVRE] Je dois marquer le panneau Oeuvre actif\");\n  OeuvrePanel.activate();\n});\nRpcOeuvre.on('desactivate', () => {\n  if ( OeuvrePanel.isInactif ) { return ; }\n  // console.log(\"[CLIENT OEUVRE] Je dois marquer le panneau Oeuvre comme inactif.\");\n  OeuvrePanel.desactivate();\n});\n\n\nRpcOeuvre.on('populate', (params) => {\n  Oeuvre.deserializeItems(params.data);\n  OeuvrePanel.populate(Oeuvre.accessTable);\n  OeuvrePanel.initKeyManager();\n});\n\nRpcOeuvre.on('display-oeuvre', (params) => {\n  // console.log(\"[CLIENT Oeuvre] Afficher oeuvre %s\", params.oeuvreId);\n  OeuvrePanel.scrollToAndSelect(params.oeuvreId);\n});\n\nRpcOeuvre.on('check-oeuvres', (params) => {\n  // console.log(\"[CLIENT-OEUVRES] V\u00E9rification demand\u00E9e des \u0153uvres :\", params);\n  const resultat = Oeuvre.doOeuvresExist(params.oeuvres);\n  // console.log(\"r\u00E9sultat du check\", resultat);\n  RpcOeuvre.notify('check-oeuvres-resultat', { CRId: params.CRId, resultat: resultat });\n});\n\nRpcOeuvre.on('after-saved-item', (params) => {\n  // console.log(\"[CLIENT Oeuvre] R\u00E9ception du after-saved-item\", params);\n  Oeuvre.onSavedItem(params);\n});\n\n(window as any).Oeuvre = Oeuvre ;"],
  "mappings": "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",
  "names": []
}
